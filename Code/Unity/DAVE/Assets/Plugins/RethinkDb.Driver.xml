<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RethinkDb.Driver</name>
    </assembly>
    <members>
        <member name="T:RethinkDb.Driver.Ast.ExtensionHelper">
            <summary>
            Extension  helpers for working with the AST.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ExtensionHelper.AsParams``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Uses a collection as parameters for a method call.
            </summary>
            <param name="args">Same as calling params object[] overload. Instead of specifying each param, ICollection can be used for convenience.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a fast <see cref="T:RethinkDb.Driver.Ast.PropertyHelper"/>.
            This constructor does not cache the helper. For caching, use <see cref="M:RethinkDb.Driver.Ast.PropertyHelper.GetProperties(System.Object)"/>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PropertyHelper.Property">
            <summary>
            Gets the backing <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PropertyHelper.Name">
            <summary>
            Gets (or sets in derived types) the property name.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PropertyHelper.ValueGetter">
            <summary>
            Gets the property value getter.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PropertyHelper.ValueSetter">
            <summary>
            Gets the property value setter.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.GetValue(System.Object)">
            <summary>
            Returns the property value for the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The object whose property value will be returned.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the specified <paramref name="instance" />.
            </summary>
            <param name="instance">The object whose property value will be set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.GetProperties(System.Object)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            underlying type.
            </summary>
            <param name="instance">the instance to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the underlying type of target instance.
            </returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">the type to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the type of target instance.
            </returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.GetVisibleProperties(System.Object)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:RethinkDb.Driver.Ast.PropertyHelper.GetVisibleProperties(System.Object)"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="instance">The instance to extract property accessors for.</param>
            <returns>
            A cached array of all public property getters from the instance's type.
            </returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.GetVisibleProperties(System.Type)">
            <summary>
            <para>
            Creates a caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:RethinkDb.Driver.Ast.PropertyHelper.GetVisibleProperties(System.Object)"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>
            A cached array of all public property getters from the type.
            </returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.MakeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.MakeNullSafeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter which is safe for a null input object. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.MakeFastPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property setter for reference types. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the setter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed. This only works for reference types.
            </remarks>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PropertyHelper.ObjectToDictionary(System.Object)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an IDictionary{string,object} instance, then a copy
             is returned.
             </summary>
             <remarks>
             The implementation of PropertyHelper will cache the property accessors per-type. This is
             faster when the the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="T:RethinkDb.Driver.Ast.Query">
            <summary>
            DO NOT USE DIRECTLY
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Ast.ReqlAst">
            <summary>
            Base class for all reql queries.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAsync``1(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAsync``1(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAsync(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
            /// <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAsync(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
            /// <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.Run``1(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.Run(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Runs the query on the connection. If you know the response type
            of your query, T (SUCCESS_ATOM) or Cursor[T] (SUCCESS_SEQUENCE or SUCCESS_PARTIAL)
            it's recommended to use `.RunAtom`, `.RunCursor` or `.RunResult` helpers
            as they offer a slight edge in performance since both bypass the 
            dynamic language runtime execution engine.
            </summary>
            <returns>Returns T or Cursor[T]</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunNoReply(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Executes a query with no expected response. Useful for fire-and-forget queries like insert, update.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunCursorAsync``1(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting a cursor (SUCCESS_SEQUENCE or SUCCESS_PARTIAL) response
            from your query. This method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
            <returns>A Cursor</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunCursorAsync``1(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting a cursor (SUCCESS_SEQUENCE or SUCCESS_PARTIAL) response
            from your query. This method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
            <returns>A Cursor</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunCursor``1(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Use this method if you're expecting a cursor (SUCCESS_SEQUENCE or SUCCESS_PARTIAL) response
            from your query. This method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <returns>A Cursor</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAtomAsync``1(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAtomAsync``1(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunAtom``1(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResultAsync``1(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM or SUCCESS_SEQUENCE response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses. Consider using RunAtom or RunCursor if your
            response is either SUCCESS_ATOM or SUCCESS_SEQUENCE respectively. Exercise caution using this method
            with large datasets as the server can switch responses from SUCESS_SEQUENCE to SUCCESS_PARTIAL for the
            same exact query.  Refer to the online documentation for this run helper.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResultAsync``1(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM or SUCCESS_SEQUENCE response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses.  Consider using RunAtom or RunCursor if your
            response is either SUCCESS_ATOM or SUCCESS_SEQUENCE respectively. Exercise caution using this method
            with large datasets as the server can switch responses from SUCESS_SEQUENCE to SUCCESS_PARTIAL for the
            same exact query.  Refer to the online documentation for this run helper.
            </summary>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResult``1(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Use this method if you're expecting SUCCESS_ATOM or SUCCESS_SEQUENCE response from your query. This
            method offers a slight edge in performance without the need for the
            dynamic language runtime like the run() method uses. Consider using RunAtom or RunCursor if your
            response is either SUCCESS_ATOM or SUCCESS_SEQUENCE respectively. Exercise caution using this method
            with large datasets as the server can switch responses from SUCESS_SEQUENCE to SUCCESS_PARTIAL for the
            same exact query. Refer to the online documentation for this run helper.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResultAsync(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for DML type of queries that returns # of inserts, deletes, errors.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResultAsync(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for DML type of queries that returns # of inserts, deletes, errors.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunResult(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Helper shortcut for DML type of queries that returns # of inserts, deletes, errors.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunChangesAsync``1(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for change feeds, use if your query is expecting an infinite changes() stream.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="T">The document type of new/old value</typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunChangesAsync``1(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for change feeds, use if your query is expecting an infinite changes() stream.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="T">The document type of new/old value</typeparam>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunChanges``1(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Helper shortcut for change feeds, use if your query is expecting an infinite changes() stream.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="T">The document type of new/old value</typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunGroupingAsync``2(RethinkDb.Driver.Net.IConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for grouping queries.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="TKey">The key type of how items are grouped</typeparam>
            <typeparam name="TItem">The type of items</typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunGroupingAsync``2(RethinkDb.Driver.Net.IConnection,System.Threading.CancellationToken)">
            <summary>
            Helper shortcut for grouping queries.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="TKey">The key type of how items are grouped</typeparam>
            <typeparam name="TItem">The type of items</typeparam>
            <param name="conn">connection</param>
            <param name="cancelToken">Cancellation token used to stop *waiting* for a query response. The cancellation token does not cancel the query's execution on the server.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlAst.RunGrouping``2(RethinkDb.Driver.Net.IConnection,System.Object)">
            <summary>
            Helper shortcut for grouping queries.
            This method bypasses the dynamic language runtime for extra performance.
            </summary>
            <typeparam name="TKey">The key type of how items are grouped</typeparam>
            <typeparam name="TItem">The type of items</typeparam>
            <param name="conn">connection</param>
            <param name="runOpts">global anonymous type optional arguments</param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ReqlExpr.Item(System.String)">
            
             <summary>
             Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
             </summary>
             <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ReqlExpr.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Eq(System.Object,System.Object[])">
            <summary>
            <para>Test if two or more values are equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Ne(System.Object,System.Object[])">
            <summary>
            <para>Test if two or more values are not equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Lt(System.Object,System.Object[])">
            <summary>
            <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored less than 10 points.</para>
            <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Le(System.Object,System.Object[])">
            <summary>
            <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or less.</para>
            <code>r.table('players').get(1)('score').le(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Gt(System.Object,System.Object[])">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored more than 10 points.</para>
            <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Ge(System.Object,System.Object[])">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or more.</para>
            <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Not">
            <summary>
            <para>Compute the logical inverse (not) of an expression.</para>
            </summary>
            <example><para>Example: Not true is false.</para>
            <code>r(true).not().run(conn, callback)
            r.not(true).run(conn, callback)
            </code>
            <para>These evaluate to <code>false</code>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Add(System.Object[])">
            <summary>
            <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
            </summary>
            <example><para>Example: It's as easy as 2 + 2 = 4.</para>
            <code>&gt; r.expr(2).add(2).run(conn, callback)
            // result passed to callback
            4
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sub(System.Object[])">
            <summary>
            <para>Subtract two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 - 2 = 0.</para>
            <code>r.expr(2).sub(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Mul(System.Object[])">
            <summary>
            <para>Multiply two numbers, or make a periodic array.</para>
            </summary>
            <example><para>Example: It's as easy as 2 * 2 = 4.</para>
            <code>r.expr(2).mul(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Div(System.Object[])">
            <summary>
            <para>Divide two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 / 2 = 1.</para>
            <code>r.expr(2).div(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Mod(System.Object)">
            <summary>
            
            </summary>
            <example><para>Example: It's as easy as 2 % 2 = 0.</para>
            <code>r.expr(2).mod(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Floor">
            <summary>
            <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
            </summary>
            <example><para>Example: Return the floor of 12.345.</para>
            <code>r.floor(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>floor</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Ceil">
            <summary>
            <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
            </summary>
            <example><para>Example: Return the ceiling of 12.345.</para>
            <code>r.ceil(12.345).run(conn, callback);
            // Result passed to callback
            13.0
            </code>
            <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Round">
            <summary>
            <para>Rounds the given value to the nearest whole integer.</para>
            </summary>
            <example><para>Example: Round 12.345 to the nearest integer.</para>
            <code>r.round(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>round</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Append(System.Object)">
            <summary>
            <para>Append a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Prepend(System.Object)">
            <summary>
            <para>Prepend a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Difference(System.Object)">
            <summary>
            <para>Remove the elements of one array from another array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment')
              .difference(['Boots'])
              .run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.SetInsert(System.Object)">
            <summary>
            <para>Add a value to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.SetIntersection(System.Object)">
            <summary>
            <para>Intersect two arrays returning values that occur in both of them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.SetUnion(System.Object)">
            <summary>
            <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.SetDifference(System.Object)">
            <summary>
            <para>Remove the elements of one array from another and return them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Slice(System.Object)">
            <summary>
            <para>Return the elements of a sequence within the specified range.</para>
            </summary>
            <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
            <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Slice(System.Object,System.Object)">
            <summary>
            <para>Return the elements of a sequence within the specified range.</para>
            </summary>
            <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
            <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Skip(System.Object)">
            <summary>
            <para>Skip a number of elements from the head of the sequence.</para>
            </summary>
            <example><para>Example: Here in conjunction with <a href="/api/javascript/order_by/">orderBy</a> we choose to ignore the most successful heroes.</para>
            <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Limit(System.Object)">
            <summary>
            <para>End the sequence after the given number of elements.</para>
            </summary>
            <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
            <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OffsetsOf(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OffsetsOf(System.Object)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OffsetsOf(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Contains(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.GetField(System.Object)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every
            object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.G(System.Object)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every
            object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Keys">
            <summary>
            <para>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href="/docs/data-types/#sorting-order">ReQL data types</a> (for strings, lexicographically).</para>
            </summary>
            <example><para>Example: Get all the keys from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).keys().run(conn, callback);
            // Result passed to callback
            [ "id", "mail", "name" ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.HasFields(System.Object[])">
            <summary>
            <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
            </summary>
            <example><para>Example: Return the players who have won games.</para>
            <code>r.table('players').hasFields('games_won').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.HasFields(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
            </summary>
            <example><para>Example: Return the players who have won games.</para>
            <code>r.table('players').hasFields('games_won').run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.WithFields(System.Object[])">
            <summary>
            <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
            </summary>
            <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
            <para>Existing table structure:</para>
            <code>[
                { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
                { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
                { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
            ]
            </code>
            <para>Command and output:</para>
            <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
            // Result passed to callback
            [
                { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
                { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.WithFields(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
            </summary>
            <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
            <para>Existing table structure:</para>
            <code>[
                { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
                { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
                { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
            ]
            </code>
            <para>Command and output:</para>
            <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
            // Result passed to callback
            [
                { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
                { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
            ]
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Pluck(System.Object[])">
            <summary>
            <para>Plucks out one or more attributes from either an object or a sequence of objects
            (projection).</para>
            </summary>
            <example><para>Example: We just need information about IronMan's reactor and not the rest of the
            document.</para>
            <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Pluck(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Plucks out one or more attributes from either an object or a sequence of objects
            (projection).</para>
            </summary>
            <example><para>Example: We just need information about IronMan's reactor and not the rest of the
            document.</para>
            <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Without(System.Object[])">
            <summary>
            <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
            the specified paths removed.</para>
            </summary>
            <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
            out the list of IronMan's romantic conquests.</para>
            <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Without(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
            the specified paths removed.</para>
            </summary>
            <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
            out the list of IronMan's romantic conquests.</para>
            <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Merge(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Between(System.Object,System.Object)">
            <summary>
            <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>, <code>leftBound</code>, and <code>rightBound</code>. If <code>index</code> is set to the name of a secondary index, <code>between</code> will return all documents where that index's value is in the specified range (it uses the primary key by default). <code>leftBound</code> or <code>rightBound</code> may be set to <code>open</code> or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default, <code>leftBound</code> is closed and <code>rightBound</code> is open).</para>
            </summary>
            <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
            <code>r.table('marvel').between(10, 20).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Reduce(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
            <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
            <code>r.table("posts").map(function(doc) {
                return 1;
            }).reduce(function(left, right) {
                return left.add(right);
            }).default(0).run(conn, callback);
            </code>
            <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Reduce(RethinkDb.Driver.Ast.ReqlFunction2)">
            <summary>
            <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
            <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
            <code>r.table("posts").map(function(doc) {
                return 1;
            }).reduce(function(left, right) {
                return left.add(right);
            }).default(0).run(conn, callback);
            </code>
            <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Fold(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
            <example><para>Example: Concatenate words from a list.</para>
            <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
            }).run(conn, callback);
            </code>
            <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Fold(System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
            <summary>
            <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
            <example><para>Example: Concatenate words from a list.</para>
            <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
            }).run(conn, callback);
            </code>
            <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction4)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction3)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(RethinkDb.Driver.Ast.ReqlFunction0)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Map(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.ReqlExpr.Filter(RethinkDb.Driver.Ast.Javascript)" -->
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.ReqlExpr.Filter(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.ReqlExpr.Filter(RethinkDb.Driver.Ast.ReqlFunction1)" -->
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ConcatMap(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
            </summary>
            <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('defeatedMonsters')
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ConcatMap(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
            </summary>
            <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('defeatedMonsters')
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OrderBy(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Distinct">
            <summary>
            <para>Removes duplicates from elements in a sequence.</para>
            </summary>
            <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('villainList')
            }).distinct().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Count">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Count(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Count(System.Object)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Count(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.IsEmpty">
            <summary>
            <para>Test if a sequence is empty.</para>
            </summary>
            <example><para>Example: Are there any documents in the marvel table?</para>
            <code>r.table('marvel').isEmpty().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Union(System.Object[])">
            <summary>
            <para>Merge two or more sequences.</para>
            </summary>
            <example><para>Example: Construct a stream of all heroes.</para>
            <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Nth(System.Object)">
            <summary>
            <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
            </summary>
            <example><para>Example: Select the second element in the array.</para>
            <code>r.expr([1,2,3]).nth(1).run(conn, callback)
            r.expr([1,2,3])(1).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Bracket(System.Object)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.InnerJoin(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Returns an inner join of two sequences.</para>
            </summary>
            <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
            <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.InnerJoin(System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
            <summary>
            <para>Returns an inner join of two sequences.</para>
            </summary>
            <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
            <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OuterJoin(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
            </summary>
            <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
            <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).run(conn, callback)
            </code>
            <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.OuterJoin(System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
            <summary>
            <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
            </summary>
            <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
            <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).run(conn, callback)
            </code>
            <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.EqJoin(RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.EqJoin(System.Object,System.Object)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.EqJoin(RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Zip">
            <summary>
            <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
            </summary>
            <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
            <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
                .zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.InsertAt(System.Object,System.Object)">
            <summary>
            <para>Insert a value in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk decides to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.DeleteAt(System.Object)">
            <summary>
            <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
            </summary>
            <example><para>Example: Delete the second element of an array.</para>
            <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
            // result passed to callback
            ['a', 'c', 'd', 'e', 'f']
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.DeleteAt(System.Object,System.Object)">
            <summary>
            <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
            </summary>
            <example><para>Example: Delete the second element of an array.</para>
            <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
            // result passed to callback
            ['a', 'c', 'd', 'e', 'f']
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ChangeAt(System.Object,System.Object)">
            <summary>
            <para>Change a value in an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Bruce Banner hulks out.</para>
            <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.SpliceAt(System.Object,System.Object)">
            <summary>
            <para>Insert several values in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk and Thor decide to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.CoerceTo(System.Object)">
            <summary>
            <para>Convert a value of one type into another.</para>
            </summary>
            <example><para>Example: Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</para>
            <code>r.table('posts').map(function (post) {
                return post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.TypeOf">
            <summary>
            <para>Gets the type of a ReQL query's return value.</para>
            </summary>
            <example><para>Example: Get the type of a string.</para>
            <code>r.expr("foo").typeOf().run(conn, callback);
            // Result passed to callback
            "STRING"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Update(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Update(System.Object)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Update(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Delete">
            <summary>
            <para>Delete one or more documents from a table.</para>
            </summary>
            <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
            <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Replace(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Replace(System.Object)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Replace(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Or(System.Object[])">
            <summary>
            <para>Compute the logical "or" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).or(b).run(conn, callback);
            // result passed to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.And(System.Object[])">
            <summary>
            <para>Compute the logical "and" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).and(b).run(conn, callback);
            // result passed to callback
            false
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ForEach(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ForEach(RethinkDb.Driver.Ast.ReqlFunction0)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ForEach(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Info">
            <summary>
            <para>Get information about a ReQL value.</para>
            </summary>
            <example><para>Example: Get information about a table such as primary key, or cache size.</para>
            <code>r.table('marvel').info().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Match(System.Object)">
            <summary>
            <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
            <ul>
            <li><code>str</code>: The matched string</li>
            <li><code>start</code>: The matched string's start</li>
            <li><code>end</code>: The matched string's end</li>
            <li><code>groups</code>: The capture groups defined with parentheses</li>
            </ul>
            <para>If no match is found, returns <code>null</code>.</para>
            </summary>
            <example><para>Example: Get all users whose name starts with "A". Because <code>null</code> evaluates to <code>false</code> in
            <a href="/api/javascript/filter/">filter</a>, you can just use the result of <code>match</code> for the predicate.</para>
            <code>r.table('users').filter(function(doc){
                return doc('name').match("^A")
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Upcase">
            <summary>
            <para>Uppercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"SENTENCE ABOUT LATEX."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Downcase">
            <summary>
            <para>Lowercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"sentence about latex."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sample(System.Object)">
            <summary>
            <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
            </summary>
            <example><para>Example: Select 3 random heroes.</para>
            <code>r.table('marvel').sample(3).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Default_(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Default_(System.Object)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Default_(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ToJsonString">
            <summary>
            <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
            </summary>
            <example><para>Example: Get a ReQL document as a JSON string.</para>
            <code>&gt; r.table('hero').get(1).toJSON()
            // result returned to callback
            '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ToJson">
            <summary>
            <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
            </summary>
            <example><para>Example: Get a ReQL document as a JSON string.</para>
            <code>&gt; r.table('hero').get(1).toJSON()
            // result returned to callback
            '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ToIso8601">
            <summary>
            <para>Convert a time object to a string in ISO 8601 format.</para>
            </summary>
            <example><para>Example: Return the current ISO 8601 time.</para>
            <code>r.now().toISO8601().run(conn, callback)
            // Result passed to callback
            "2015-04-20T18:37:52.690+00:00"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ToEpochTime">
            <summary>
            <para>Convert a time object to its epoch time.</para>
            </summary>
            <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
            <code>r.now().toEpochTime()
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.InTimezone(System.Object)">
            <summary>
            <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
            </summary>
            <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
            <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.During(System.Object,System.Object)">
            <summary>
            <para>Return whether a time is between two other times.</para>
            </summary>
            <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013
            (inclusive) and December 10th, 2013 (exclusive).</para>
            <code>r.table("posts").filter(
                r.row('date').during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Date">
            <summary>
            <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
            </summary>
            <example><para>Example: Retrieve all the users whose birthday is today.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").date().eq(r.now().date())
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.TimeOfDay">
            <summary>
            <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
            </summary>
            <example><para>Example: Retrieve posts that were submitted before noon.</para>
            <code>r.table("posts").filter(
                r.row("date").timeOfDay().le(12*60*60)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Timezone">
            <summary>
            <para>Return the timezone of the time object.</para>
            </summary>
            <example><para>Example: Return all the users in the "-07:00" timezone.</para>
            <code>r.table("users").filter( function(user) {
                return user("subscriptionDate").timezone().eq("-07:00")
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Year">
            <summary>
            <para>Return the year of a time object.</para>
            </summary>
            <example><para>Example: Retrieve all the users born in 1986.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").year().eq(1986)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Month">
            <summary>
            <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born in November.</para>
            <code>r.table("users").filter(
                r.row("birthdate").month().eq(11)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Day">
            <summary>
            <para>Return the day of a time object as a number between 1 and 31.</para>
            </summary>
            <example><para>Example: Return the users born on the 24th of any month.</para>
            <code>r.table("users").filter(
                r.row("birthdate").day().eq(24)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.DayOfWeek">
            <summary>
            <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Return today's day of week.</para>
            <code>r.now().dayOfWeek().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.DayOfYear">
            <summary>
            <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
            <code>r.table("users").filter(
                r.row("birthdate").dayOfYear().eq(1)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Hours">
            <summary>
            <para>Return the hour in a time object as a number between 0 and 23.</para>
            </summary>
            <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").hours().lt(4)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Minutes">
            <summary>
            <para>Return the minute in a time object as a number between 0 and 59.</para>
            </summary>
            <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").minutes().lt(10)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Seconds">
            <summary>
            <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
            </summary>
            <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").seconds().lt(30)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Group(RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sum">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sum(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sum(System.Object)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Sum(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Avg">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Avg(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Avg(System.Object)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Avg(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Min">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Min(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Min(System.Object)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Min(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Max">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Max(RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Max(System.Object)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Max(RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Split">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Split(System.Object)">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Split(System.Object,System.Object)">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Ungroup">
            <summary>
            <para>Takes a grouped stream or grouped data and turns it into an array of
            objects representing the groups.  Any commands chained after <code>ungroup</code>
            will operate on this array, rather than operating on each group
            individually.  This is useful if you want to e.g. order the groups by
            the value of their reduction.</para>
            </summary>
            <example><para>Example: What is the maximum number of points scored by each
            player, with the highest scorers first?</para>
            <code>r.table('games')
               .group('player').max('points')('points')
               .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Changes">
            <summary>
            <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
            </summary>
            <example><para>Example: Subscribe to the changes on a table.</para>
            <para>Start monitoring the changefeed in one client:</para>
            <code>r.table('games').changes().run(conn, function(err, cursor) {
              cursor.each(console.log);
            });
            </code>
            <para>As these queries are performed in a second client, the first
            client would receive and print the following objects:</para>
            <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
            {old_val: null, new_val: {id: 1}}
            
            &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
            {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
            
            &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
            {old_val: {id: 1, player1: 'Bob'},
             new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
            
            &gt; r.table('games').get(1).delete().run(conn, callback)
            {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
            
            &gt; r.tableDrop('games').run(conn, callback);
            ReqlRuntimeError: Changefeed aborted (table unavailable)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.ToGeojson">
            <summary>
            <para>Convert a ReQL geometry object to a <a href="http://geojson.org">GeoJSON</a> object.</para>
            </summary>
            <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
            <code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);
            // result passed to callback
            {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Distance(System.Object)">
            <summary>
            <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
            </summary>
            <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
            <code>var point1 = r.point(-122.423246,37.779388);
            var point2 = r.point(-117.220406,32.719464);
            r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
            // result returned to callback
            734.1252496021841
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Intersects(System.Object)">
            <summary>
            <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).intersects(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Includes(System.Object)">
            <summary>
            <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).includes(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Fill">
            <summary>
            <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
            </summary>
            <example><para>Example: Create a line object and then convert it to a polygon.</para>
            <code>r.table('geo').insert({
                id: 201,
                rectangle: r.line(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            
            r.table('geo').get(201).update({
                rectangle: r.row('rectangle').fill()
            }, {nonAtomic: true}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.PolygonSub(System.Object)">
            <summary>
            <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
            </summary>
            <example><para>Example: Define a polygon with a hole punched in it.</para>
            <code>var outerPolygon = r.polygon(
                [-122.4,37.7],
                [-122.4,37.3],
                [-121.8,37.3],
                [-121.8,37.7]
            );
            var innerPolygon = r.polygon(
                [-122.3,37.4],
                [-122.3,37.6],
                [-122.0,37.6],
                [-122.0,37.4]
            );
            outerPolygon.polygonSub(innerPolygon).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlExpr.Values">
            <summary>
            <para>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href="/api/javascript/keys">keys</a>.</para>
            </summary>
            <example><para>Example: Get all of the values from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).values().run(conn, callback);
            // Result passed to callback
            [ 1, "fred@example.com", "fred" ]
            </code></example>
        </member>
        <member name="T:RethinkDb.Driver.Ast.ReqlRawExpr">
            <summary>
            Used to inject raw protocol strings when the AST is dumped on the wire.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRawExpr.#ctor(System.String)">
            <summary>
            Create an AST mid-flight with the raw protocol string.
            </summary>
            <param name="rawProtocol">Raw protocol string from ReqlAst.Build()</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRawExpr.Build">
            <summary>
            Return the JToken representation of the raw protocol
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Ast.ReqlRaw">
            <summary>
            Used to inject raw protocol strings when the AST is dumped on the wire.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRaw.#ctor(System.String)">
            <summary>
            Create an AST mid-flight with the raw protocol string.
            </summary>
            <param name="rawProtocol">Raw protocol string from ReqlAst.Build()</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRaw.Build">
            <summary>
            Return the JToken representation of the raw protocol
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRaw.ToRawString(System.Object)">
            <summary>
            Convert an AST item into a raw protocol string representation.
            Useful for serialization.
            </summary>
            <param name="astItem">Can be anything, ReqlFunction or otherwise</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlRaw.FromRawString(System.String)">
            <summary>
            Convert a raw protocol string into an AST term that will
            be injected when the AST is serialized.
            </summary>
            <param name="reqlRawString">The raw protocol string to inject</param>
            <returns>A raw AST term</returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Iso8601(System.Nullable{System.DateTime})">
            <summary>
            Type-safe helper method for R.Iso8601
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Iso8601(System.Nullable{System.DateTimeOffset})">
            <summary>
            Type-safe helper method for R.Iso8601
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.EpochTime(System.Nullable{System.DateTime})">
            <summary>
            Type-safe helper for R.EpochTime
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.EpochTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            Type-safe helper for R.EpochTime
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Uuid">
             <summary>
             <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
            </summary>
             <example><para>Example: Generate a UUID.</para>
             <code>&gt; r.uuid().run(conn, callback)
             // result returned to callback
             "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Uuid(System.Object)">
             <summary>
             <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
            </summary>
             <example><para>Example: Generate a UUID.</para>
             <code>&gt; r.uuid().run(conn, callback)
             // result returned to callback
             "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Http(System.Object)">
             <summary>
             <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
            </summary>
             <example><para>Example: Perform an HTTP <code>GET</code> and store the result in a table.</para>
             <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Error">
             <summary>
             <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
            </summary>
             <example><para>Example: Iron Man can't possibly have lost a battle:</para>
             <code>r.table('marvel').get('IronMan').do(function(ironman) {
                 return r.branch(ironman('victories').lt(ironman('battles')),
                     r.error('impossible code path'),
                     ironman)
             }).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Error(System.Object)">
             <summary>
             <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
            </summary>
             <example><para>Example: Iron Man can't possibly have lost a battle:</para>
             <code>r.table('marvel').get('IronMan').do(function(ironman) {
                 return r.branch(ironman('victories').lt(ironman('battles')),
                     r.error('impossible code path'),
                     ironman)
             }).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Db(System.Object)">
             <summary>
             <para>Reference a database.</para>
            </summary>
             <example><para>Example: Explicitly specify a database for a query.</para>
             <code>r.db('heroes').table('marvel').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Table(System.Object)">
             <summary>
             <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
            </summary>
             <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
             <code>r.table('marvel').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Eq(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Test if two or more values are equal.</para>
            </summary>
             <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
             <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Ne(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Test if two or more values are not equal.</para>
            </summary>
             <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
             <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Lt(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
            </summary>
             <example><para>Example: Test if a player has scored less than 10 points.</para>
             <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Le(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
            </summary>
             <example><para>Example: Test if a player has scored 10 points or less.</para>
             <code>r.table('players').get(1)('score').le(10).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Gt(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
            </summary>
             <example><para>Example: Test if a player has scored more than 10 points.</para>
             <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Ge(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
            </summary>
             <example><para>Example: Test if a player has scored 10 points or more.</para>
             <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Not(System.Object)">
             <summary>
             <para>Compute the logical inverse (not) of an expression.</para>
            </summary>
             <example><para>Example: Not true is false.</para>
             <code>r(true).not().run(conn, callback)
             r.not(true).run(conn, callback)
             </code>
             <para>These evaluate to <code>false</code>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Add(System.Object,System.Object[])">
             <summary>
             <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
            </summary>
             <example><para>Example: It's as easy as 2 + 2 = 4.</para>
             <code>&gt; r.expr(2).add(2).run(conn, callback)
             // result passed to callback
             4
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Sub(System.Object,System.Object[])">
             <summary>
             <para>Subtract two numbers.</para>
            </summary>
             <example><para>Example: It's as easy as 2 - 2 = 0.</para>
             <code>r.expr(2).sub(2).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Mul(System.Object,System.Object[])">
             <summary>
             <para>Multiply two numbers, or make a periodic array.</para>
            </summary>
             <example><para>Example: It's as easy as 2 * 2 = 4.</para>
             <code>r.expr(2).mul(2).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Div(System.Object,System.Object[])">
             <summary>
             <para>Divide two numbers.</para>
            </summary>
             <example><para>Example: It's as easy as 2 / 2 = 1.</para>
             <code>r.expr(2).div(2).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Mod(System.Object,System.Object)">
             <summary>
             
            </summary>
             <example><para>Example: It's as easy as 2 % 2 = 0.</para>
             <code>r.expr(2).mod(2).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Floor(System.Object)">
             <summary>
             <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
            </summary>
             <example><para>Example: Return the floor of 12.345.</para>
             <code>r.floor(12.345).run(conn, callback);
             // Result passed to callback
             12.0
             </code>
             <para>The <code>floor</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Ceil(System.Object)">
             <summary>
             <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
            </summary>
             <example><para>Example: Return the ceiling of 12.345.</para>
             <code>r.ceil(12.345).run(conn, callback);
             // Result passed to callback
             13.0
             </code>
             <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Round(System.Object)">
             <summary>
             <para>Rounds the given value to the nearest whole integer.</para>
            </summary>
             <example><para>Example: Round 12.345 to the nearest integer.</para>
             <code>r.round(12.345).run(conn, callback);
             // Result passed to callback
             12.0
             </code>
             <para>The <code>round</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Contains(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>When called with values, returns <code>true</code> if a sequence contains all the
             specified values.  When called with predicate functions, returns <code>true</code>
             if for each predicate there exists at least one element of the stream
             where that predicate returns <code>true</code>.</para>
            </summary>
             <example><para>Example: Has Iron Man ever fought Superman?</para>
             <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Object_(System.Object[])">
             <summary>
             <para>Creates an object from a list of key-value pairs, where the keys must
             be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
             <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
            </summary>
             <example><para>Example: Create a simple object.</para>
             <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
             </code>
             <para>Result:</para>
             <code>{data: ["foo", "bar"], id: 5}
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Reduce(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
             <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
             <code>r.table("posts").map(function(doc) {
                 return 1;
             }).reduce(function(left, right) {
                 return left.add(right);
             }).default(0).run(conn, callback);
             </code>
             <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Reduce(System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
             <summary>
             <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
             <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
             <code>r.table("posts").map(function(doc) {
                 return 1;
             }).reduce(function(left, right) {
                 return left.add(right);
             }).default(0).run(conn, callback);
             </code>
             <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Fold(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
             <example><para>Example: Concatenate words from a list.</para>
             <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                 return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
             }).run(conn, callback);
             </code>
             <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Fold(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
             <summary>
             <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
             <example><para>Example: Concatenate words from a list.</para>
             <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                 return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
             }).run(conn, callback);
             </code>
             <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction4)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction3)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction2)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,RethinkDb.Driver.Ast.ReqlFunction0)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Map(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
             <example><para>Example: Return the first five squares.</para>
             <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                 return val.mul(val);
             }).run(conn, callback);
             // Result passed to callback
             [1, 4, 9, 16, 25]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Distinct(System.Object)">
             <summary>
             <para>Removes duplicates from elements in a sequence.</para>
            </summary>
             <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
             <code>r.table('marvel').concatMap(function(hero) {
                 return hero('villainList')
             }).distinct().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Count(System.Object)">
             <summary>
             <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
             <example><para>Example: Count the number of users.</para>
             <code>r.table('users').count().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Count(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
             <example><para>Example: Count the number of users.</para>
             <code>r.table('users').count().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Count(System.Object,System.Object)">
             <summary>
             <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
             <example><para>Example: Count the number of users.</para>
             <code>r.table('users').count().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Count(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
             <example><para>Example: Count the number of users.</para>
             <code>r.table('users').count().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Union(System.Object,System.Object[])">
             <summary>
             <para>Merge two or more sequences.</para>
            </summary>
             <example><para>Example: Construct a stream of all heroes.</para>
             <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Range">
             <summary>
             <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
             <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
             <code>&gt; r.range(4).run(conn, callback)
             // result returned to callback
             [0, 1, 2, 3]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Range(System.Object)">
             <summary>
             <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
             <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
             <code>&gt; r.range(4).run(conn, callback)
             // result returned to callback
             [0, 1, 2, 3]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Range(System.Object,System.Object)">
             <summary>
             <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
             <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
             <code>&gt; r.range(4).run(conn, callback)
             // result returned to callback
             [0, 1, 2, 3]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.TypeOf(System.Object)">
             <summary>
             <para>Gets the type of a ReQL query's return value.</para>
            </summary>
             <example><para>Example: Get the type of a string.</para>
             <code>r.expr("foo").typeOf().run(conn, callback);
             // Result passed to callback
             "STRING"
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.DbCreate(System.Object)">
             <summary>
             <para>Create a database. A RethinkDB database is a collection of tables, similar to
             relational databases.</para>
            </summary>
             <example><para>Example: Create a database named 'superheroes'.</para>
             <code>&gt; r.dbCreate('superheroes').run(conn, callback);
             // Result passed to callback
             {
                 "config_changes": [
                     {
                         "new_val": {
                             "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                             "name": "superheroes"
                         },
                         "old_val": null
                     }
                 ],
                 "dbs_created": 1
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.DbDrop(System.Object)">
             <summary>
             <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
            </summary>
             <example><para>Example: Drop a database named 'superheroes'.</para>
             <code>&gt; r.dbDrop('superheroes').run(conn, callback);
             // Result passed to callback
             {
                 "config_changes": [
                     {
                         "old_val": {
                             "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                             "name": "superheroes"
                         },
                         "new_val": null
                     }
                 ],
                 "tables_dropped": 3,
                 "dbs_dropped": 1
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.DbList">
             <summary>
             <para>List all database names in the system. The result is a list of strings.</para>
            </summary>
             <example><para>Example: List all databases.</para>
             <code>r.dbList().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.TableCreate(System.Object)">
             <summary>
             <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
            </summary>
             <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
             <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
             // Result passed to callback
             {
                 "config_changes": [
                     {
                         "new_val": {
                             "db": "test",
                             "durability":  "hard",
                             "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                             "name": "dc_universe",
                             "primary_key": "id",
                             "shards": [
                                 {
                                     "primary_replica": "rethinkdb_srv1",
                                     "replicas": [
                                         "rethinkdb_srv1",
                                         "rethinkdb_srv2"
                                     ]
                                 }
                             ],
                             "write_acks": "majority"
                         },
                         "old_val": null
                     }
                 ],
                 "tables_created": 1
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.TableDrop(System.Object)">
             <summary>
             <para>Drop a table from a database. The table and all its data will be deleted.</para>
            </summary>
             <example><para>Example: Drop a table named 'dc_universe'.</para>
             <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
             // Result passed to callback
             {
                 "config_changes": [
                     {
                         "old_val": {
                             "db": "test",
                             "durability":  "hard",
                             "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                             "name": "dc_universe",
                             "primary_key": "id",
                             "shards": [
                                 {
                                     "primary_replica": "rethinkdb_srv1",
                                     "replicas": [
                                         "rethinkdb_srv1",
                                         "rethinkdb_srv2"
                                     ]
                                 }
                             ],
                             "write_acks": "majority"
                         },
                         "new_val": null
                     }
                 ],
                 "tables_dropped": 1
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.TableList">
             <summary>
             <para>List all table names in a database. The result is a list of strings.</para>
            </summary>
             <example><para>Example: List all tables of the 'test' database.</para>
             <code>r.db('test').tableList().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Grant(System.Object,System.Object)">
             <summary>
             <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
             <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
             <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
             
             // Result passed to callback
             {
                 "granted": 1,
                 "permissions_changes": [
                     {
                         "new_val": { "read": true, "write": true },
                         "old_val": { null }
                     }
                 ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Branch(System.Object,System.Object,System.Object,System.Object[])">
             <summary>
             <para>Perform a branching conditional equivalent to <code>if-then-else</code>.</para>
             <para>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., "truthy" values), with a final "else" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</para>
            </summary>
             <example><para>Example: Test the value of x.</para>
             <code>var x = 10;
             r.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);
             // Result passed to callback
             "big"
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Or(System.Object[])">
             <summary>
             <para>Compute the logical "or" of one or more values.</para>
            </summary>
             <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
             <code>var a = true, b = false;
             r.expr(a).or(b).run(conn, callback);
             // result passed to callback
             true
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.And(System.Object[])">
             <summary>
             <para>Compute the logical "and" of one or more values.</para>
            </summary>
             <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
             <code>var a = true, b = false;
             r.expr(a).and(b).run(conn, callback);
             // result passed to callback
             false
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Info(System.Object)">
             <summary>
             <para>Get information about a ReQL value.</para>
            </summary>
             <example><para>Example: Get information about a table such as primary key, or cache size.</para>
             <code>r.table('marvel').info().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Json(System.Object)">
             <summary>
             <para>Parse a JSON string on the server.</para>
            </summary>
             <example><para>Example: Send an array to the server.</para>
             <code>r.json("[1,2,3]").run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Iso8601(System.Object)">
             <summary>
             <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
            </summary>
             <example><para>Example: Update the time of John's birth.</para>
             <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.EpochTime(System.Object)">
             <summary>
             <para>Create a time object based on seconds since epoch. The first argument is a double and
             will be rounded to three decimal places (millisecond-precision).</para>
            </summary>
             <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
             <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Now">
             <summary>
             <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
            </summary>
             <example><para>Example: Add a new user with the time at which he subscribed.</para>
             <code>r.table("users").insert({
                 name: "John",
                 subscription_date: r.now()
             }).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Time(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>Create a time object for a specific time.</para>
            </summary>
             <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
             <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Time(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>Create a time object for a specific time.</para>
            </summary>
             <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
             <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Literal">
             <summary>
             <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
            </summary>
             <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
             <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
             
             // Result passed to callback
             {
                 "id": 1,
                 "name": "Alice",
                 "data": {
                     "age": 19,
                     "job": "Engineer"
                 }
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Literal(System.Object)">
             <summary>
             <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
            </summary>
             <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
             <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
             
             // Result passed to callback
             {
                 "id": 1,
                 "name": "Alice",
                 "data": {
                     "age": 19,
                     "job": "Engineer"
                 }
             }
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,System.Object)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Group(System.Object,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Takes a stream and partitions it into multiple groups based on the
             fields or functions provided.</para>
            </summary>
             <example><para>Example: Group games by player.</para>
             <code>&gt; r.table('games').group('player').run(conn, callback)
             
             // Result passed to callback
             [
                 {
                     group: "Alice",
                     reduction: [
                         {id: 5, player: "Alice", points: 7, type: "free"},
                         {id: 12, player: "Alice", points: 2, type: "free"}
                     ]
                 },
                 {
                     group: "Bob",
                     reduction: [
                         {id: 2, player: "Bob", points: 15, type: "ranked"},
                         {id: 11, player: "Bob", points: 10, type: "free"}
                     ]
                 }
             ]
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Sum(System.Object)">
             <summary>
             <para>Sums all the elements of a sequence.  If called with a field name,
             sums all the values of that field in the sequence, skipping elements
             of the sequence that lack that field.  If called with a function,
             calls that function on every element of the sequence and sums the
             results, skipping elements of the sequence where that function returns
             <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's 3 + 5 + 7?</para>
             <code>r.expr([3, 5, 7]).sum().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Sum(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Sums all the elements of a sequence.  If called with a field name,
             sums all the values of that field in the sequence, skipping elements
             of the sequence that lack that field.  If called with a function,
             calls that function on every element of the sequence and sums the
             results, skipping elements of the sequence where that function returns
             <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's 3 + 5 + 7?</para>
             <code>r.expr([3, 5, 7]).sum().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Sum(System.Object,System.Object)">
             <summary>
             <para>Sums all the elements of a sequence.  If called with a field name,
             sums all the values of that field in the sequence, skipping elements
             of the sequence that lack that field.  If called with a function,
             calls that function on every element of the sequence and sums the
             results, skipping elements of the sequence where that function returns
             <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's 3 + 5 + 7?</para>
             <code>r.expr([3, 5, 7]).sum().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Sum(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Sums all the elements of a sequence.  If called with a field name,
             sums all the values of that field in the sequence, skipping elements
             of the sequence that lack that field.  If called with a function,
             calls that function on every element of the sequence and sums the
             results, skipping elements of the sequence where that function returns
             <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's 3 + 5 + 7?</para>
             <code>r.expr([3, 5, 7]).sum().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Avg(System.Object)">
             <summary>
             <para>Averages all the elements of a sequence.  If called with a field name,
             averages all the values of that field in the sequence, skipping
             elements of the sequence that lack that field.  If called with a
             function, calls that function on every element of the sequence and
             averages the results, skipping elements of the sequence where that
             function returns <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's the average of 3, 5, and 7?</para>
             <code>r.expr([3, 5, 7]).avg().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Avg(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Averages all the elements of a sequence.  If called with a field name,
             averages all the values of that field in the sequence, skipping
             elements of the sequence that lack that field.  If called with a
             function, calls that function on every element of the sequence and
             averages the results, skipping elements of the sequence where that
             function returns <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's the average of 3, 5, and 7?</para>
             <code>r.expr([3, 5, 7]).avg().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Avg(System.Object,System.Object)">
             <summary>
             <para>Averages all the elements of a sequence.  If called with a field name,
             averages all the values of that field in the sequence, skipping
             elements of the sequence that lack that field.  If called with a
             function, calls that function on every element of the sequence and
             averages the results, skipping elements of the sequence where that
             function returns <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's the average of 3, 5, and 7?</para>
             <code>r.expr([3, 5, 7]).avg().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Avg(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Averages all the elements of a sequence.  If called with a field name,
             averages all the values of that field in the sequence, skipping
             elements of the sequence that lack that field.  If called with a
             function, calls that function on every element of the sequence and
             averages the results, skipping elements of the sequence where that
             function returns <code>null</code> or a non-existence error.</para>
            </summary>
             <example><para>Example: What's the average of 3, 5, and 7?</para>
             <code>r.expr([3, 5, 7]).avg().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Min(System.Object)">
             <summary>
             <para>Finds the minimum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).min().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Min(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Finds the minimum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).min().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Min(System.Object,System.Object)">
             <summary>
             <para>Finds the minimum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).min().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Min(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Finds the minimum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).min().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Max(System.Object)">
             <summary>
             <para>Finds the maximum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).max().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Max(System.Object,RethinkDb.Driver.Ast.Javascript)">
             <summary>
             <para>Finds the maximum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).max().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Max(System.Object,System.Object)">
             <summary>
             <para>Finds the maximum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).max().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Max(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
             <summary>
             <para>Finds the maximum element of a sequence.</para>
            </summary>
             <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
             <code>r.expr([3, 5, 7]).max().run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Random">
             <summary>
             <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
             <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
             <code>r.random().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Random(System.Object)">
             <summary>
             <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
             <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
             <code>r.random().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Random(System.Object,System.Object)">
             <summary>
             <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
             <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
             <code>r.random().run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Args(System.Object)">
             <summary>
             <para><code>r.args</code> is a special term that's used to splice an array of arguments
             into another term.  This is useful when you want to call a variadic
             term such as <a href="/api/javascript/get_all/">getAll</a> with a set of arguments produced at runtime.</para>
            </summary>
             <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
             <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
             // or
             r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Binary(System.Object)">
             <summary>
             <para>Encapsulate binary data within a query.</para>
            </summary>
             <example><para>Example: Save an avatar image to a existing user record.</para>
             <code>var fs = require('fs');
             fs.readFile('./defaultAvatar.png', function (err, avatarImage) {
                 if (err) {
                     // Handle error
                 }
                 else {
                     r.table('users').get(100).update({
                         avatar: avatarImage
                     })
                 }
             });
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Geojson(System.Object)">
             <summary>
             <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
            </summary>
             <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
             <code>var geoJson = {
                 'type': 'Point',
                 'coordinates': [ -122.423246, 37.779388 ]
             };
             r.table('geo').insert({
                 id: 'sfo',
                 name: 'San Francisco',
                 location: r.geojson(geoJson)
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Point(System.Object,System.Object)">
             <summary>
             <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (-180 to 180) and latitude (-90 to 90) of the point on a perfect sphere. See <a href="/docs/geo-support/">Geospatial support</a> for more information on ReQL's coordinate system.</para>
            </summary>
             <example><para>Example: Define a point.</para>
             <code>r.table('geo').insert({
                 id: 1,
                 name: 'San Francisco',
                 location: r.point(-122.423246,37.779388)
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Line(System.Object,System.Object,System.Object[])">
             <summary>
             <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
             <ul>
             <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line's vertices;</li>
             <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
             </ul>
            </summary>
             <example><para>Example: Define a line.</para>
             <code>r.table('geo').insert({
                 id: 101,
                 route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Polygon(System.Object,System.Object,System.Object,System.Object[])">
             <summary>
             <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
             <ul>
             <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon's vertices;</li>
             <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
             </ul>
            </summary>
             <example><para>Example: Define a polygon.</para>
             <code>r.table('geo').insert({
                 id: 101,
                 rectangle: r.polygon(
                     [-122.423246,37.779388],
                     [-122.423246,37.329898],
                     [-121.886420,37.329898],
                     [-121.886420,37.779388]
                 )
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Distance(System.Object,System.Object)">
             <summary>
             <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
            </summary>
             <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
             <code>var point1 = r.point(-122.423246,37.779388);
             var point2 = r.point(-117.220406,32.719464);
             r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
             // result returned to callback
             734.1252496021841
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Intersects(System.Object,System.Object)">
             <summary>
             <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
            </summary>
             <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
             <code>var point1 = r.point(-117.220406,32.719464);
             var point2 = r.point(-117.206201,32.725186);
             r.circle(point1, 2000).intersects(point2).run(conn, callback);
             // result returned to callback
             true
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Circle(System.Object)">
             <summary>
             <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
             <example><para>Example: Define a circle.</para>
             <code>r.table('geo').insert({
                 id: 300,
                 name: 'Hayes Valley',
                 neighborhood: r.circle([-122.423246,37.779388], 1000)
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Circle(System.Object,System.Object)">
             <summary>
             <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
             <example><para>Example: Define a circle.</para>
             <code>r.table('geo').insert({
                 id: 300,
                 name: 'Hayes Valley',
                 neighborhood: r.circle([-122.423246,37.779388], 1000)
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TopLevel.Circle(System.Object,System.Object,System.Object)">
             <summary>
             <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
             <example><para>Example: Define a circle.</para>
             <code>r.table('geo').insert({
                 id: 300,
                 name: 'Hayes Valley',
                 neighborhood: r.circle([-122.423246,37.779388], 1000)
             }).run(conn, callback);
             </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Add.#ctor(System.Object)">
            <summary>
            <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
            </summary>
            <example><para>Example: It's as easy as 2 + 2 = 4.</para>
            <code>&gt; r.expr(2).add(2).run(conn, callback)
            // result passed to callback
            4
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Add.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
            </summary>
            <example><para>Example: It's as easy as 2 + 2 = 4.</para>
            <code>&gt; r.expr(2).add(2).run(conn, callback)
            // result passed to callback
            4
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Add.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
            </summary>
            <example><para>Example: It's as easy as 2 + 2 = 4.</para>
            <code>&gt; r.expr(2).add(2).run(conn, callback)
            // result passed to callback
            4
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Add.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Add.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.And.#ctor(System.Object)">
            <summary>
            <para>Compute the logical "and" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).and(b).run(conn, callback);
            // result passed to callback
            false
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.And.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compute the logical "and" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).and(b).run(conn, callback);
            // result passed to callback
            false
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.And.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compute the logical "and" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).and(b).run(conn, callback);
            // result passed to callback
            false
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.And.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.And.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Append.#ctor(System.Object)">
            <summary>
            <para>Append a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Append.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Append a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Append.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Append a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Append.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Append.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.April.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.April.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Args.#ctor(System.Object)">
            <summary>
            <para><code>r.args</code> is a special term that's used to splice an array of arguments
            into another term.  This is useful when you want to call a variadic
            term such as <a href="/api/javascript/get_all/">getAll</a> with a set of arguments produced at runtime.</para>
            </summary>
            <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
            <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
            // or
            r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Args.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para><code>r.args</code> is a special term that's used to splice an array of arguments
            into another term.  This is useful when you want to call a variadic
            term such as <a href="/api/javascript/get_all/">getAll</a> with a set of arguments produced at runtime.</para>
            </summary>
            <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
            <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
            // or
            r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Args.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para><code>r.args</code> is a special term that's used to splice an array of arguments
            into another term.  This is useful when you want to call a variadic
            term such as <a href="/api/javascript/get_all/">getAll</a> with a set of arguments produced at runtime.</para>
            </summary>
            <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
            <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
            // or
            r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Args.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Args.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Asc.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Asc.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.August.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.August.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Avg.#ctor(System.Object)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Avg.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Avg.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Averages all the elements of a sequence.  If called with a field name,
            averages all the values of that field in the sequence, skipping
            elements of the sequence that lack that field.  If called with a
            function, calls that function on every element of the sequence and
            averages the results, skipping elements of the sequence where that
            function returns <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's the average of 3, 5, and 7?</para>
            <code>r.expr([3, 5, 7]).avg().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Avg.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Avg.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Between.#ctor(System.Object)">
            <summary>
            <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>, <code>leftBound</code>, and <code>rightBound</code>. If <code>index</code> is set to the name of a secondary index, <code>between</code> will return all documents where that index's value is in the specified range (it uses the primary key by default). <code>leftBound</code> or <code>rightBound</code> may be set to <code>open</code> or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default, <code>leftBound</code> is closed and <code>rightBound</code> is open).</para>
            </summary>
            <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
            <code>r.table('marvel').between(10, 20).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Between.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>, <code>leftBound</code>, and <code>rightBound</code>. If <code>index</code> is set to the name of a secondary index, <code>between</code> will return all documents where that index's value is in the specified range (it uses the primary key by default). <code>leftBound</code> or <code>rightBound</code> may be set to <code>open</code> or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default, <code>leftBound</code> is closed and <code>rightBound</code> is open).</para>
            </summary>
            <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
            <code>r.table('marvel').between(10, 20).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Between.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>, <code>leftBound</code>, and <code>rightBound</code>. If <code>index</code> is set to the name of a secondary index, <code>between</code> will return all documents where that index's value is in the specified range (it uses the primary key by default). <code>leftBound</code> or <code>rightBound</code> may be set to <code>open</code> or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default, <code>leftBound</code> is closed and <code>rightBound</code> is open).</para>
            </summary>
            <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
            <code>r.table('marvel').between(10, 20).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Between.Item(System.Object)">
            <summary>
             "index": "T_STR",
              "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Between.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR",
              "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Between.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR",
              "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Between.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Between.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Binary.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Binary.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Bracket.#ctor(System.Object)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Bracket.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Bracket.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Bracket.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Bracket.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Branch.#ctor(System.Object)">
            <summary>
            <para>Perform a branching conditional equivalent to <code>if-then-else</code>.</para>
            <para>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., "truthy" values), with a final "else" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</para>
            </summary>
            <example><para>Example: Test the value of x.</para>
            <code>var x = 10;
            r.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);
            // Result passed to callback
            "big"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Branch.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Perform a branching conditional equivalent to <code>if-then-else</code>.</para>
            <para>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., "truthy" values), with a final "else" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</para>
            </summary>
            <example><para>Example: Test the value of x.</para>
            <code>var x = 10;
            r.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);
            // Result passed to callback
            "big"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Branch.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Perform a branching conditional equivalent to <code>if-then-else</code>.</para>
            <para>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., "truthy" values), with a final "else" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</para>
            </summary>
            <example><para>Example: Test the value of x.</para>
            <code>var x = 10;
            r.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);
            // Result passed to callback
            "big"
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Branch.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Branch.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ceil.#ctor(System.Object)">
            <summary>
            <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
            </summary>
            <example><para>Example: Return the ceiling of 12.345.</para>
            <code>r.ceil(12.345).run(conn, callback);
            // Result passed to callback
            13.0
            </code>
            <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ceil.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
            </summary>
            <example><para>Example: Return the ceiling of 12.345.</para>
            <code>r.ceil(12.345).run(conn, callback);
            // Result passed to callback
            13.0
            </code>
            <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ceil.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
            </summary>
            <example><para>Example: Return the ceiling of 12.345.</para>
            <code>r.ceil(12.345).run(conn, callback);
            // Result passed to callback
            13.0
            </code>
            <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ceil.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ceil.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ChangeAt.#ctor(System.Object)">
            <summary>
            <para>Change a value in an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Bruce Banner hulks out.</para>
            <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ChangeAt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Change a value in an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Bruce Banner hulks out.</para>
            <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ChangeAt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Change a value in an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Bruce Banner hulks out.</para>
            <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ChangeAt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ChangeAt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Changes.#ctor(System.Object)">
            <summary>
            <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
            </summary>
            <example><para>Example: Subscribe to the changes on a table.</para>
            <para>Start monitoring the changefeed in one client:</para>
            <code>r.table('games').changes().run(conn, function(err, cursor) {
              cursor.each(console.log);
            });
            </code>
            <para>As these queries are performed in a second client, the first
            client would receive and print the following objects:</para>
            <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
            {old_val: null, new_val: {id: 1}}
            
            &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
            {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
            
            &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
            {old_val: {id: 1, player1: 'Bob'},
             new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
            
            &gt; r.table('games').get(1).delete().run(conn, callback)
            {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
            
            &gt; r.tableDrop('games').run(conn, callback);
            ReqlRuntimeError: Changefeed aborted (table unavailable)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Changes.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
            </summary>
            <example><para>Example: Subscribe to the changes on a table.</para>
            <para>Start monitoring the changefeed in one client:</para>
            <code>r.table('games').changes().run(conn, function(err, cursor) {
              cursor.each(console.log);
            });
            </code>
            <para>As these queries are performed in a second client, the first
            client would receive and print the following objects:</para>
            <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
            {old_val: null, new_val: {id: 1}}
            
            &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
            {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
            
            &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
            {old_val: {id: 1, player1: 'Bob'},
             new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
            
            &gt; r.table('games').get(1).delete().run(conn, callback)
            {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
            
            &gt; r.tableDrop('games').run(conn, callback);
            ReqlRuntimeError: Changefeed aborted (table unavailable)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Changes.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
            </summary>
            <example><para>Example: Subscribe to the changes on a table.</para>
            <para>Start monitoring the changefeed in one client:</para>
            <code>r.table('games').changes().run(conn, function(err, cursor) {
              cursor.each(console.log);
            });
            </code>
            <para>As these queries are performed in a second client, the first
            client would receive and print the following objects:</para>
            <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
            {old_val: null, new_val: {id: 1}}
            
            &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
            {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
            
            &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
            {old_val: {id: 1, player1: 'Bob'},
             new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
            
            &gt; r.table('games').get(1).delete().run(conn, callback)
            {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
            
            &gt; r.tableDrop('games').run(conn, callback);
            ReqlRuntimeError: Changefeed aborted (table unavailable)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Changes.Item(System.Object)">
            <summary>
             "squash": "T_BOOL",
              "include_states": "T_BOOL",
              "include_initial": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Changes.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "squash": "T_BOOL",
              "include_states": "T_BOOL",
              "include_initial": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Changes.OptArg(System.String,System.Object)">
            <summary>
             "squash": "T_BOOL",
              "include_states": "T_BOOL",
              "include_initial": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Changes.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Changes.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Circle.#ctor(System.Object)">
            <summary>
            <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
            <example><para>Example: Define a circle.</para>
            <code>r.table('geo').insert({
                id: 300,
                name: 'Hayes Valley',
                neighborhood: r.circle([-122.423246,37.779388], 1000)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Circle.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
            <example><para>Example: Define a circle.</para>
            <code>r.table('geo').insert({
                id: 300,
                name: 'Hayes Valley',
                neighborhood: r.circle([-122.423246,37.779388], 1000)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Circle.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
            </summary>
            <example><para>Example: Define a circle.</para>
            <code>r.table('geo').insert({
                id: 300,
                name: 'Hayes Valley',
                neighborhood: r.circle([-122.423246,37.779388], 1000)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Circle.Item(System.Object)">
            <summary>
             "num_vertices": "T_EXPR",
              "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT",
              "fill": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Circle.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "num_vertices": "T_EXPR",
              "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT",
              "fill": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Circle.OptArg(System.String,System.Object)">
            <summary>
             "num_vertices": "T_EXPR",
              "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT",
              "fill": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Circle.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Circle.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.CoerceTo.#ctor(System.Object)">
            <summary>
            <para>Convert a value of one type into another.</para>
            </summary>
            <example><para>Example: Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</para>
            <code>r.table('posts').map(function (post) {
                return post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.CoerceTo.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a value of one type into another.</para>
            </summary>
            <example><para>Example: Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</para>
            <code>r.table('posts').map(function (post) {
                return post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.CoerceTo.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a value of one type into another.</para>
            </summary>
            <example><para>Example: Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</para>
            <code>r.table('posts').map(function (post) {
                return post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.CoerceTo.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.CoerceTo.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ConcatMap.#ctor(System.Object)">
            <summary>
            <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
            </summary>
            <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('defeatedMonsters')
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ConcatMap.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
            </summary>
            <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('defeatedMonsters')
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ConcatMap.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
            </summary>
            <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('defeatedMonsters')
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ConcatMap.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ConcatMap.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Config.#ctor(System.Object)">
            <summary>
            <para>Query (read and/or update) the configurations for individual tables or databases.</para>
            </summary>
            <example><para>Example: Get the configuration for the <code>users</code> table.</para>
            <code>&gt; r.table('users').config().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Config.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Query (read and/or update) the configurations for individual tables or databases.</para>
            </summary>
            <example><para>Example: Get the configuration for the <code>users</code> table.</para>
            <code>&gt; r.table('users').config().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Config.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Query (read and/or update) the configurations for individual tables or databases.</para>
            </summary>
            <example><para>Example: Get the configuration for the <code>users</code> table.</para>
            <code>&gt; r.table('users').config().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Config.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Config.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Contains.#ctor(System.Object)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Contains.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Contains.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>When called with values, returns <code>true</code> if a sequence contains all the
            specified values.  When called with predicate functions, returns <code>true</code>
            if for each predicate there exists at least one element of the stream
            where that predicate returns <code>true</code>.</para>
            </summary>
            <example><para>Example: Has Iron Man ever fought Superman?</para>
            <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Contains.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Contains.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Count.#ctor(System.Object)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Count.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Count.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
            </summary>
            <example><para>Example: Count the number of users.</para>
            <code>r.table('users').count().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Count.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Count.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Date.#ctor(System.Object)">
            <summary>
            <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
            </summary>
            <example><para>Example: Retrieve all the users whose birthday is today.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").date().eq(r.now().date())
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Date.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
            </summary>
            <example><para>Example: Retrieve all the users whose birthday is today.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").date().eq(r.now().date())
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Date.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
            </summary>
            <example><para>Example: Retrieve all the users whose birthday is today.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").date().eq(r.now().date())
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Date.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Date.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Datum.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Datum.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Day.#ctor(System.Object)">
            <summary>
            <para>Return the day of a time object as a number between 1 and 31.</para>
            </summary>
            <example><para>Example: Return the users born on the 24th of any month.</para>
            <code>r.table("users").filter(
                r.row("birthdate").day().eq(24)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Day.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the day of a time object as a number between 1 and 31.</para>
            </summary>
            <example><para>Example: Return the users born on the 24th of any month.</para>
            <code>r.table("users").filter(
                r.row("birthdate").day().eq(24)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Day.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the day of a time object as a number between 1 and 31.</para>
            </summary>
            <example><para>Example: Return the users born on the 24th of any month.</para>
            <code>r.table("users").filter(
                r.row("birthdate").day().eq(24)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Day.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Day.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfWeek.#ctor(System.Object)">
            <summary>
            <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Return today's day of week.</para>
            <code>r.now().dayOfWeek().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfWeek.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Return today's day of week.</para>
            <code>r.now().dayOfWeek().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfWeek.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Return today's day of week.</para>
            <code>r.now().dayOfWeek().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DayOfWeek.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DayOfWeek.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfYear.#ctor(System.Object)">
            <summary>
            <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
            <code>r.table("users").filter(
                r.row("birthdate").dayOfYear().eq(1)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfYear.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
            <code>r.table("users").filter(
                r.row("birthdate").dayOfYear().eq(1)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DayOfYear.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
            <code>r.table("users").filter(
                r.row("birthdate").dayOfYear().eq(1)
            )
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DayOfYear.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DayOfYear.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.#ctor(System.Object)">
            <summary>
            <para>Reference a database.</para>
            </summary>
            <example><para>Example: Explicitly specify a database for a query.</para>
            <code>r.db('heroes').table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Reference a database.</para>
            </summary>
            <example><para>Example: Explicitly specify a database for a query.</para>
            <code>r.db('heroes').table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Reference a database.</para>
            </summary>
            <example><para>Example: Explicitly specify a database for a query.</para>
            <code>r.db('heroes').table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Table(System.Object)">
            <summary>
            <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
            </summary>
            <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
            <code>r.table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.TableCreate(System.Object)">
            <summary>
            <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
            </summary>
            <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
            <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "old_val": null
                    }
                ],
                "tables_created": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.TableDrop(System.Object)">
            <summary>
            <para>Drop a table from a database. The table and all its data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a table named 'dc_universe'.</para>
            <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.TableList">
            <summary>
            <para>List all table names in a database. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all tables of the 'test' database.</para>
            <code>r.db('test').tableList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Config">
            <summary>
            <para>Query (read and/or update) the configurations for individual tables or databases.</para>
            </summary>
            <example><para>Example: Get the configuration for the <code>users</code> table.</para>
            <code>&gt; r.table('users').config().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Wait_">
            <summary>
            <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
            </summary>
            <example><para>Example: Wait on a table to be ready.</para>
            <code>&gt; r.table('superheroes').wait().run(conn, callback);
            // Result passed to callback
            { "ready": 1 }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Reconfigure">
            <summary>
            <para>Reconfigure a table's sharding and replication.</para>
            </summary>
            <example><para>Example: Reconfigure a table.</para>
            <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Rebalance">
            <summary>
            <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
            </summary>
            <example><para>Example: Rebalance a table.</para>
            <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Grant(System.Object,System.Object)">
            <summary>
            <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
            <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
            <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
            
            // Result passed to callback
            {
                "granted": 1,
                "permissions_changes": [
                    {
                        "new_val": { "read": true, "write": true },
                        "old_val": { null }
                    }
                ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Db.Info">
            <summary>
            <para>Get information about a ReQL value.</para>
            </summary>
            <example><para>Example: Get information about a table such as primary key, or cache size.</para>
            <code>r.table('marvel').info().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbCreate.#ctor(System.Object)">
            <summary>
            <para>Create a database. A RethinkDB database is a collection of tables, similar to
            relational databases.</para>
            </summary>
            <example><para>Example: Create a database named 'superheroes'.</para>
            <code>&gt; r.dbCreate('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "old_val": null
                    }
                ],
                "dbs_created": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbCreate.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a database. A RethinkDB database is a collection of tables, similar to
            relational databases.</para>
            </summary>
            <example><para>Example: Create a database named 'superheroes'.</para>
            <code>&gt; r.dbCreate('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "old_val": null
                    }
                ],
                "dbs_created": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbCreate.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a database. A RethinkDB database is a collection of tables, similar to
            relational databases.</para>
            </summary>
            <example><para>Example: Create a database named 'superheroes'.</para>
            <code>&gt; r.dbCreate('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "old_val": null
                    }
                ],
                "dbs_created": 1
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbCreate.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbCreate.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbDrop.#ctor(System.Object)">
            <summary>
            <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a database named 'superheroes'.</para>
            <code>&gt; r.dbDrop('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 3,
                "dbs_dropped": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbDrop.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a database named 'superheroes'.</para>
            <code>&gt; r.dbDrop('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 3,
                "dbs_dropped": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbDrop.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a database named 'superheroes'.</para>
            <code>&gt; r.dbDrop('superheroes').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
                            "name": "superheroes"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 3,
                "dbs_dropped": 1
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbDrop.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbDrop.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbList.#ctor(System.Object)">
            <summary>
            <para>List all database names in the system. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all databases.</para>
            <code>r.dbList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbList.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>List all database names in the system. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all databases.</para>
            <code>r.dbList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DbList.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>List all database names in the system. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all databases.</para>
            <code>r.dbList().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbList.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DbList.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.December.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.December.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Default.#ctor(System.Object)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Default.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Default.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
            </summary>
            <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
            In the case where the author field is missing or <code>null</code>, we want to retrieve the string
            <code>Anonymous</code>.</para>
            <code>r.table("posts").map(function (post) {
                return {
                    title: post("title"),
                    author: post("author").default("Anonymous")
                }
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Default.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Default.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Delete.#ctor(System.Object)">
            <summary>
            <para>Delete one or more documents from a table.</para>
            </summary>
            <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
            <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Delete.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Delete one or more documents from a table.</para>
            </summary>
            <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
            <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Delete.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Delete one or more documents from a table.</para>
            </summary>
            <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
            <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Delete.Item(System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ]
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Delete.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ]
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Delete.OptArg(System.String,System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ]
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Delete.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Delete.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DeleteAt.#ctor(System.Object)">
            <summary>
            <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
            </summary>
            <example><para>Example: Delete the second element of an array.</para>
            <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
            // result passed to callback
            ['a', 'c', 'd', 'e', 'f']
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DeleteAt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
            </summary>
            <example><para>Example: Delete the second element of an array.</para>
            <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
            // result passed to callback
            ['a', 'c', 'd', 'e', 'f']
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.DeleteAt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
            </summary>
            <example><para>Example: Delete the second element of an array.</para>
            <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
            // result passed to callback
            ['a', 'c', 'd', 'e', 'f']
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DeleteAt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.DeleteAt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Desc.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Desc.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Difference.#ctor(System.Object)">
            <summary>
            <para>Remove the elements of one array from another array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment')
              .difference(['Boots'])
              .run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Difference.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Remove the elements of one array from another array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment')
              .difference(['Boots'])
              .run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Difference.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Remove the elements of one array from another array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment')
              .difference(['Boots'])
              .run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Difference.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Difference.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distance.#ctor(System.Object)">
            <summary>
            <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
            </summary>
            <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
            <code>var point1 = r.point(-122.423246,37.779388);
            var point2 = r.point(-117.220406,32.719464);
            r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
            // result returned to callback
            734.1252496021841
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distance.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
            </summary>
            <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
            <code>var point1 = r.point(-122.423246,37.779388);
            var point2 = r.point(-117.220406,32.719464);
            r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
            // result returned to callback
            734.1252496021841
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distance.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
            </summary>
            <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
            <code>var point1 = r.point(-122.423246,37.779388);
            var point2 = r.point(-117.220406,32.719464);
            r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
            // result returned to callback
            734.1252496021841
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distance.Item(System.Object)">
            <summary>
             "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distance.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distance.OptArg(System.String,System.Object)">
            <summary>
             "geo_system": "E_GEO_SYSTEM",
              "unit": "E_UNIT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distance.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distance.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distinct.#ctor(System.Object)">
            <summary>
            <para>Removes duplicates from elements in a sequence.</para>
            </summary>
            <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('villainList')
            }).distinct().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distinct.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Removes duplicates from elements in a sequence.</para>
            </summary>
            <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('villainList')
            }).distinct().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distinct.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Removes duplicates from elements in a sequence.</para>
            </summary>
            <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
            <code>r.table('marvel').concatMap(function(hero) {
                return hero('villainList')
            }).distinct().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distinct.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distinct.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Distinct.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distinct.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Distinct.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Div.#ctor(System.Object)">
            <summary>
            <para>Divide two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 / 2 = 1.</para>
            <code>r.expr(2).div(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Div.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Divide two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 / 2 = 1.</para>
            <code>r.expr(2).div(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Div.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Divide two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 / 2 = 1.</para>
            <code>r.expr(2).div(2).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Div.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Div.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Downcase.#ctor(System.Object)">
            <summary>
            <para>Lowercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"sentence about latex."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Downcase.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Lowercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"sentence about latex."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Downcase.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Lowercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"sentence about latex."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Downcase.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Downcase.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.During.#ctor(System.Object)">
            <summary>
            <para>Return whether a time is between two other times.</para>
            </summary>
            <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013
            (inclusive) and December 10th, 2013 (exclusive).</para>
            <code>r.table("posts").filter(
                r.row('date').during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.During.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return whether a time is between two other times.</para>
            </summary>
            <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013
            (inclusive) and December 10th, 2013 (exclusive).</para>
            <code>r.table("posts").filter(
                r.row('date').during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.During.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return whether a time is between two other times.</para>
            </summary>
            <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013
            (inclusive) and December 10th, 2013 (exclusive).</para>
            <code>r.table("posts").filter(
                r.row('date').during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.During.Item(System.Object)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.During.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.During.OptArg(System.String,System.Object)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.During.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.During.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EpochTime.#ctor(System.Object)">
            <summary>
            <para>Create a time object based on seconds since epoch. The first argument is a double and
            will be rounded to three decimal places (millisecond-precision).</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
            <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EpochTime.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a time object based on seconds since epoch. The first argument is a double and
            will be rounded to three decimal places (millisecond-precision).</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
            <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EpochTime.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a time object based on seconds since epoch. The first argument is a double and
            will be rounded to three decimal places (millisecond-precision).</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
            <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EpochTime.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EpochTime.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Eq.#ctor(System.Object)">
            <summary>
            <para>Test if two or more values are equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Eq.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Test if two or more values are equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Eq.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Test if two or more values are equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Eq.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Eq.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EqJoin.#ctor(System.Object)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EqJoin.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EqJoin.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
            </summary>
            <example></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EqJoin.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EqJoin.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.EqJoin.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EqJoin.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.EqJoin.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Error.#ctor(System.Object)">
            <summary>
            <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
            </summary>
            <example><para>Example: Iron Man can't possibly have lost a battle:</para>
            <code>r.table('marvel').get('IronMan').do(function(ironman) {
                return r.branch(ironman('victories').lt(ironman('battles')),
                    r.error('impossible code path'),
                    ironman)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Error.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
            </summary>
            <example><para>Example: Iron Man can't possibly have lost a battle:</para>
            <code>r.table('marvel').get('IronMan').do(function(ironman) {
                return r.branch(ironman('victories').lt(ironman('battles')),
                    r.error('impossible code path'),
                    ironman)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Error.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
            </summary>
            <example><para>Example: Iron Man can't possibly have lost a battle:</para>
            <code>r.table('marvel').get('IronMan').do(function(ironman) {
                return r.branch(ironman('victories').lt(ironman('battles')),
                    r.error('impossible code path'),
                    ironman)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Error.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Error.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.February.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.February.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fill.#ctor(System.Object)">
            <summary>
            <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
            </summary>
            <example><para>Example: Create a line object and then convert it to a polygon.</para>
            <code>r.table('geo').insert({
                id: 201,
                rectangle: r.line(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            
            r.table('geo').get(201).update({
                rectangle: r.row('rectangle').fill()
            }, {nonAtomic: true}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fill.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
            </summary>
            <example><para>Example: Create a line object and then convert it to a polygon.</para>
            <code>r.table('geo').insert({
                id: 201,
                rectangle: r.line(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            
            r.table('geo').get(201).update({
                rectangle: r.row('rectangle').fill()
            }, {nonAtomic: true}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fill.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
            </summary>
            <example><para>Example: Create a line object and then convert it to a polygon.</para>
            <code>r.table('geo').insert({
                id: 201,
                rectangle: r.line(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            
            r.table('geo').get(201).update({
                rectangle: r.row('rectangle').fill()
            }, {nonAtomic: true}).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fill.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fill.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.Filter.#ctor(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.Filter.#ctor(RethinkDb.Driver.Model.Arguments)" -->
        <!-- Badly formed XML comment ignored for member "M:RethinkDb.Driver.Ast.Filter.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)" -->
        <member name="P:RethinkDb.Driver.Ast.Filter.Item(System.Object)">
            <summary>
             "default": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Filter.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "default": "T_EXPR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Filter.OptArg(System.String,System.Object)">
            <summary>
             "default": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Filter.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Filter.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Floor.#ctor(System.Object)">
            <summary>
            <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
            </summary>
            <example><para>Example: Return the floor of 12.345.</para>
            <code>r.floor(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>floor</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Floor.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
            </summary>
            <example><para>Example: Return the floor of 12.345.</para>
            <code>r.floor(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>floor</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Floor.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
            </summary>
            <example><para>Example: Return the floor of 12.345.</para>
            <code>r.floor(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>floor</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Floor.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Floor.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fold.#ctor(System.Object)">
            <summary>
            <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
            <example><para>Example: Concatenate words from a list.</para>
            <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
            }).run(conn, callback);
            </code>
            <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fold.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
            <example><para>Example: Concatenate words from a list.</para>
            <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
            }).run(conn, callback);
            </code>
            <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fold.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
            </summary>
            <example><para>Example: Concatenate words from a list.</para>
            <code>r.table('words').orderBy('id').fold('', function (acc, word) {
                return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
            }).run(conn, callback);
            </code>
            <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fold.Item(System.Object)">
            <summary>
             "emit": "T_FUNC3",
              "final_emit": "T_FUNC1"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fold.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "emit": "T_FUNC3",
              "final_emit": "T_FUNC1"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Fold.OptArg(System.String,System.Object)">
            <summary>
             "emit": "T_FUNC3",
              "final_emit": "T_FUNC1"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fold.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Fold.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ForEach.#ctor(System.Object)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ForEach.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ForEach.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Loop over a sequence, evaluating the given write query for each element.</para>
            </summary>
            <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
            <code>r.table('marvel').forEach(function(hero) {
                return r.table('villains').get(hero('villainDefeated')).delete()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ForEach.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ForEach.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Friday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Friday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Func.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Func.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Funcall.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Funcall.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ge.#ctor(System.Object)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or more.</para>
            <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ge.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or more.</para>
            <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ge.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or more.</para>
            <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ge.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ge.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Geojson.#ctor(System.Object)">
            <summary>
            <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
            </summary>
            <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
            <code>var geoJson = {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            };
            r.table('geo').insert({
                id: 'sfo',
                name: 'San Francisco',
                location: r.geojson(geoJson)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Geojson.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
            </summary>
            <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
            <code>var geoJson = {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            };
            r.table('geo').insert({
                id: 'sfo',
                name: 'San Francisco',
                location: r.geojson(geoJson)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Geojson.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
            </summary>
            <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
            <code>var geoJson = {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            };
            r.table('geo').insert({
                id: 'sfo',
                name: 'San Francisco',
                location: r.geojson(geoJson)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Geojson.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Geojson.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Get.#ctor(System.Object)">
            <summary>
            <para>Get a document by primary key.</para>
            </summary>
            <example><para>Example: Find a document by UUID.</para>
            <code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Get.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get a document by primary key.</para>
            </summary>
            <example><para>Example: Find a document by UUID.</para>
            <code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Get.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get a document by primary key.</para>
            </summary>
            <example><para>Example: Find a document by UUID.</para>
            <code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Get.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Get.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetAll.#ctor(System.Object)">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetAll.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetAll.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetAll.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetAll.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetAll.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetAll.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetAll.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetField.#ctor(System.Object)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every
            object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetField.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every
            object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetField.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get a single field from an object. If called on a sequence, gets that field from every
            object in the sequence, skipping objects that lack it.</para>
            </summary>
            <example><para>Example: What was Iron Man's first appearance in a comic?</para>
            <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetField.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetField.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetIntersecting.#ctor(System.Object)">
            <summary>
            <para>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</para>
            </summary>
            <example><para>Example: Which of the locations in a list of parks intersect <code>circle1</code>?</para>
            <code>var circle1 = r.circle([-117.220406,32.719464], 10, {unit: 'mi'});
            r.table('parks').getIntersecting(circle1, {index: 'area'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetIntersecting.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</para>
            </summary>
            <example><para>Example: Which of the locations in a list of parks intersect <code>circle1</code>?</para>
            <code>var circle1 = r.circle([-117.220406,32.719464], 10, {unit: 'mi'});
            r.table('parks').getIntersecting(circle1, {index: 'area'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetIntersecting.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</para>
            </summary>
            <example><para>Example: Which of the locations in a list of parks intersect <code>circle1</code>?</para>
            <code>var circle1 = r.circle([-117.220406,32.719464], 10, {unit: 'mi'});
            r.table('parks').getIntersecting(circle1, {index: 'area'}).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetIntersecting.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetIntersecting.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetIntersecting.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetIntersecting.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetIntersecting.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetNearest.#ctor(System.Object)">
            <summary>
            <para>Get all documents where the specified geospatial index is within a certain distance of the specified point (default 100 kilometers).</para>
            </summary>
            <example><para>Example: Return a list of enemy hideouts within 5000 meters of the secret base.</para>
            <code>var secretBase = r.point(-122.422876,37.777128);
            r.table('hideouts').getNearest(secretBase,
                {index: 'location', maxDist: 5000}
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetNearest.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get all documents where the specified geospatial index is within a certain distance of the specified point (default 100 kilometers).</para>
            </summary>
            <example><para>Example: Return a list of enemy hideouts within 5000 meters of the secret base.</para>
            <code>var secretBase = r.point(-122.422876,37.777128);
            r.table('hideouts').getNearest(secretBase,
                {index: 'location', maxDist: 5000}
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetNearest.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get all documents where the specified geospatial index is within a certain distance of the specified point (default 100 kilometers).</para>
            </summary>
            <example><para>Example: Return a list of enemy hideouts within 5000 meters of the secret base.</para>
            <code>var secretBase = r.point(-122.422876,37.777128);
            r.table('hideouts').getNearest(secretBase,
                {index: 'location', maxDist: 5000}
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetNearest.Item(System.Object)">
            <summary>
             "index": "T_STR",
              "max_results": "T_NUM",
              "unit": "E_UNIT",
              "max_dist": "T_NUM",
              "geo_system": "E_GEO_SYSTEM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetNearest.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR",
              "max_results": "T_NUM",
              "unit": "E_UNIT",
              "max_dist": "T_NUM",
              "geo_system": "E_GEO_SYSTEM"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.GetNearest.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR",
              "max_results": "T_NUM",
              "unit": "E_UNIT",
              "max_dist": "T_NUM",
              "geo_system": "E_GEO_SYSTEM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetNearest.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.GetNearest.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Grant.#ctor(System.Object)">
            <summary>
            <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
            <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
            <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
            
            // Result passed to callback
            {
                "granted": 1,
                "permissions_changes": [
                    {
                        "new_val": { "read": true, "write": true },
                        "old_val": { null }
                    }
                ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Grant.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
            <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
            <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
            
            // Result passed to callback
            {
                "granted": 1,
                "permissions_changes": [
                    {
                        "new_val": { "read": true, "write": true },
                        "old_val": { null }
                    }
                ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Grant.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
            <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
            <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
            
            // Result passed to callback
            {
                "granted": 1,
                "permissions_changes": [
                    {
                        "new_val": { "read": true, "write": true },
                        "old_val": { null }
                    }
                ]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Grant.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Grant.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Group.#ctor(System.Object)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Group.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Group.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Takes a stream and partitions it into multiple groups based on the
            fields or functions provided.</para>
            </summary>
            <example><para>Example: Group games by player.</para>
            <code>&gt; r.table('games').group('player').run(conn, callback)
            
            // Result passed to callback
            [
                {
                    group: "Alice",
                    reduction: [
                        {id: 5, player: "Alice", points: 7, type: "free"},
                        {id: 12, player: "Alice", points: 2, type: "free"}
                    ]
                },
                {
                    group: "Bob",
                    reduction: [
                        {id: 2, player: "Bob", points: 15, type: "ranked"},
                        {id: 11, player: "Bob", points: 10, type: "free"}
                    ]
                }
            ]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Group.Item(System.Object)">
            <summary>
             "index": "T_STR",
              "multi": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Group.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR",
              "multi": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Group.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR",
              "multi": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Group.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Group.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Gt.#ctor(System.Object)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored more than 10 points.</para>
            <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Gt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored more than 10 points.</para>
            <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Gt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored more than 10 points.</para>
            <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Gt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Gt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.HasFields.#ctor(System.Object)">
            <summary>
            <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
            </summary>
            <example><para>Example: Return the players who have won games.</para>
            <code>r.table('players').hasFields('games_won').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.HasFields.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
            </summary>
            <example><para>Example: Return the players who have won games.</para>
            <code>r.table('players').hasFields('games_won').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.HasFields.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
            </summary>
            <example><para>Example: Return the players who have won games.</para>
            <code>r.table('players').hasFields('games_won').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.HasFields.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.HasFields.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Hours.#ctor(System.Object)">
            <summary>
            <para>Return the hour in a time object as a number between 0 and 23.</para>
            </summary>
            <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").hours().lt(4)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Hours.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the hour in a time object as a number between 0 and 23.</para>
            </summary>
            <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").hours().lt(4)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Hours.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the hour in a time object as a number between 0 and 23.</para>
            </summary>
            <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").hours().lt(4)
            })
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Hours.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Hours.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Http.#ctor(System.Object)">
            <summary>
            <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
            </summary>
            <example><para>Example: Perform an HTTP <code>GET</code> and store the result in a table.</para>
            <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Http.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
            </summary>
            <example><para>Example: Perform an HTTP <code>GET</code> and store the result in a table.</para>
            <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Http.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
            </summary>
            <example><para>Example: Perform an HTTP <code>GET</code> and store the result in a table.</para>
            <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Http.Item(System.Object)">
            <summary>
             "timeout": "T_NUM",
              "reattempts": "T_NUM",
              "redirects": "T_NUM",
              "verify": "T_BOOL",
              "result_format": "E_RESULT_FORMAT",
              "method": "E_HTTP_METHOD",
              "auth": {
                "type": "E_AUTH_TYPE",
                "user": "T_STR",
                "pass": "T_STR"
              },
              "params": "T_OBJECT",
              "header": [
                "T_ARRAY",
                "T_OBJECT"
              ],
              "data": [
                "T_STR",
                "T_OBJECT"
              ]
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Http.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "timeout": "T_NUM",
              "reattempts": "T_NUM",
              "redirects": "T_NUM",
              "verify": "T_BOOL",
              "result_format": "E_RESULT_FORMAT",
              "method": "E_HTTP_METHOD",
              "auth": {
                "type": "E_AUTH_TYPE",
                "user": "T_STR",
                "pass": "T_STR"
              },
              "params": "T_OBJECT",
              "header": [
                "T_ARRAY",
                "T_OBJECT"
              ],
              "data": [
                "T_STR",
                "T_OBJECT"
              ]
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Http.OptArg(System.String,System.Object)">
            <summary>
             "timeout": "T_NUM",
              "reattempts": "T_NUM",
              "redirects": "T_NUM",
              "verify": "T_BOOL",
              "result_format": "E_RESULT_FORMAT",
              "method": "E_HTTP_METHOD",
              "auth": {
                "type": "E_AUTH_TYPE",
                "user": "T_STR",
                "pass": "T_STR"
              },
              "params": "T_OBJECT",
              "header": [
                "T_ARRAY",
                "T_OBJECT"
              ],
              "data": [
                "T_STR",
                "T_OBJECT"
              ]
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Http.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Http.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Includes.#ctor(System.Object)">
            <summary>
            <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).includes(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Includes.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).includes(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Includes.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).includes(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Includes.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Includes.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexCreate.#ctor(System.Object)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexCreate.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexCreate.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexCreate.Item(System.Object)">
            <summary>
             "multi": "T_BOOL",
              "geo": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexCreate.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "multi": "T_BOOL",
              "geo": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexCreate.OptArg(System.String,System.Object)">
            <summary>
             "multi": "T_BOOL",
              "geo": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexCreate.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexCreate.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexDrop.#ctor(System.Object)">
            <summary>
            <para>Delete a previously created secondary index of this table.</para>
            </summary>
            <example><para>Example: Drop a secondary index named 'code_name'.</para>
            <code>r.table('dc').indexDrop('code_name').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexDrop.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Delete a previously created secondary index of this table.</para>
            </summary>
            <example><para>Example: Drop a secondary index named 'code_name'.</para>
            <code>r.table('dc').indexDrop('code_name').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexDrop.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Delete a previously created secondary index of this table.</para>
            </summary>
            <example><para>Example: Drop a secondary index named 'code_name'.</para>
            <code>r.table('dc').indexDrop('code_name').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexDrop.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexDrop.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexList.#ctor(System.Object)">
            <summary>
            <para>List all the secondary indexes of this table.</para>
            </summary>
            <example><para>Example: List the available secondary indexes for this table.</para>
            <code>r.table('marvel').indexList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexList.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>List all the secondary indexes of this table.</para>
            </summary>
            <example><para>Example: List the available secondary indexes for this table.</para>
            <code>r.table('marvel').indexList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexList.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>List all the secondary indexes of this table.</para>
            </summary>
            <example><para>Example: List the available secondary indexes for this table.</para>
            <code>r.table('marvel').indexList().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexList.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexList.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexRename.#ctor(System.Object)">
            <summary>
            <para>Rename an existing secondary index on a table. If the optional argument <code>overwrite</code> is specified as <code>true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code>overwrite</code> is <code>false</code> (the default) an error will be raised if the new index name already exists.</para>
            </summary>
            <example><para>Example: Rename an index on the comments table.</para>
            <code>r.table('comments').indexRename('postId', 'messageId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexRename.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Rename an existing secondary index on a table. If the optional argument <code>overwrite</code> is specified as <code>true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code>overwrite</code> is <code>false</code> (the default) an error will be raised if the new index name already exists.</para>
            </summary>
            <example><para>Example: Rename an index on the comments table.</para>
            <code>r.table('comments').indexRename('postId', 'messageId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexRename.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Rename an existing secondary index on a table. If the optional argument <code>overwrite</code> is specified as <code>true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code>overwrite</code> is <code>false</code> (the default) an error will be raised if the new index name already exists.</para>
            </summary>
            <example><para>Example: Rename an index on the comments table.</para>
            <code>r.table('comments').indexRename('postId', 'messageId').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexRename.Item(System.Object)">
            <summary>
             "overwrite": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexRename.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "overwrite": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexRename.OptArg(System.String,System.Object)">
            <summary>
             "overwrite": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexRename.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexRename.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexStatus.#ctor(System.Object)">
            <summary>
            <para>Get the status of the specified indexes on this table, or the status
            of all indexes on this table if no indexes are specified.</para>
            </summary>
            <example><para>Example: Get the status of all the indexes on <code>test</code>:</para>
            <code>r.table('test').indexStatus().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexStatus.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get the status of the specified indexes on this table, or the status
            of all indexes on this table if no indexes are specified.</para>
            </summary>
            <example><para>Example: Get the status of all the indexes on <code>test</code>:</para>
            <code>r.table('test').indexStatus().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexStatus.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get the status of the specified indexes on this table, or the status
            of all indexes on this table if no indexes are specified.</para>
            </summary>
            <example><para>Example: Get the status of all the indexes on <code>test</code>:</para>
            <code>r.table('test').indexStatus().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexStatus.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexStatus.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexWait.#ctor(System.Object)">
            <summary>
            <para>Wait for the specified indexes on this table to be ready, or for all
            indexes on this table to be ready if no indexes are specified.</para>
            </summary>
            <example><para>Example: Wait for all indexes on the table <code>test</code> to be ready:</para>
            <code>r.table('test').indexWait().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexWait.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Wait for the specified indexes on this table to be ready, or for all
            indexes on this table to be ready if no indexes are specified.</para>
            </summary>
            <example><para>Example: Wait for all indexes on the table <code>test</code> to be ready:</para>
            <code>r.table('test').indexWait().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IndexWait.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Wait for the specified indexes on this table to be ready, or for all
            indexes on this table to be ready if no indexes are specified.</para>
            </summary>
            <example><para>Example: Wait for all indexes on the table <code>test</code> to be ready:</para>
            <code>r.table('test').indexWait().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexWait.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IndexWait.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Info.#ctor(System.Object)">
            <summary>
            <para>Get information about a ReQL value.</para>
            </summary>
            <example><para>Example: Get information about a table such as primary key, or cache size.</para>
            <code>r.table('marvel').info().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Info.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get information about a ReQL value.</para>
            </summary>
            <example><para>Example: Get information about a table such as primary key, or cache size.</para>
            <code>r.table('marvel').info().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Info.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get information about a ReQL value.</para>
            </summary>
            <example><para>Example: Get information about a table such as primary key, or cache size.</para>
            <code>r.table('marvel').info().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Info.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Info.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InnerJoin.#ctor(System.Object)">
            <summary>
            <para>Returns an inner join of two sequences.</para>
            </summary>
            <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
            <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InnerJoin.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Returns an inner join of two sequences.</para>
            </summary>
            <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
            <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InnerJoin.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Returns an inner join of two sequences.</para>
            </summary>
            <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
            <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).zip().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InnerJoin.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InnerJoin.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Insert.#ctor(System.Object)">
            <summary>
            <para>Insert documents into a table. Accepts a single document or an array of
            documents.</para>
            </summary>
            <example><para>Example: Insert a document into the table <code>posts</code>.</para>
            <code>r.table("posts").insert({
                id: 1,
                title: "Lorem ipsum",
                content: "Dolor sit amet"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Insert.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Insert documents into a table. Accepts a single document or an array of
            documents.</para>
            </summary>
            <example><para>Example: Insert a document into the table <code>posts</code>.</para>
            <code>r.table("posts").insert({
                id: 1,
                title: "Lorem ipsum",
                content: "Dolor sit amet"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Insert.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Insert documents into a table. Accepts a single document or an array of
            documents.</para>
            </summary>
            <example><para>Example: Insert a document into the table <code>posts</code>.</para>
            <code>r.table("posts").insert({
                id: 1,
                title: "Lorem ipsum",
                content: "Dolor sit amet"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Insert.Item(System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "conflict": "E_CONFLICT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Insert.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "conflict": "E_CONFLICT"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Insert.OptArg(System.String,System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "conflict": "E_CONFLICT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Insert.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Insert.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InsertAt.#ctor(System.Object)">
            <summary>
            <para>Insert a value in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk decides to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InsertAt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Insert a value in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk decides to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InsertAt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Insert a value in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk decides to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InsertAt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InsertAt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Intersects.#ctor(System.Object)">
            <summary>
            <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).intersects(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Intersects.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).intersects(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Intersects.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
            </summary>
            <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
            <code>var point1 = r.point(-117.220406,32.719464);
            var point2 = r.point(-117.206201,32.725186);
            r.circle(point1, 2000).intersects(point2).run(conn, callback);
            // result returned to callback
            true
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Intersects.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Intersects.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InTimezone.#ctor(System.Object)">
            <summary>
            <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
            </summary>
            <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
            <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InTimezone.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
            </summary>
            <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
            <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.InTimezone.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
            </summary>
            <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
            <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InTimezone.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.InTimezone.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IsEmpty.#ctor(System.Object)">
            <summary>
            <para>Test if a sequence is empty.</para>
            </summary>
            <example><para>Example: Are there any documents in the marvel table?</para>
            <code>r.table('marvel').isEmpty().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IsEmpty.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Test if a sequence is empty.</para>
            </summary>
            <example><para>Example: Are there any documents in the marvel table?</para>
            <code>r.table('marvel').isEmpty().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.IsEmpty.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Test if a sequence is empty.</para>
            </summary>
            <example><para>Example: Are there any documents in the marvel table?</para>
            <code>r.table('marvel').isEmpty().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IsEmpty.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.IsEmpty.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Iso8601.#ctor(System.Object)">
            <summary>
            <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
            </summary>
            <example><para>Example: Update the time of John's birth.</para>
            <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Iso8601.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
            </summary>
            <example><para>Example: Update the time of John's birth.</para>
            <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Iso8601.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
            </summary>
            <example><para>Example: Update the time of John's birth.</para>
            <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Iso8601.Item(System.Object)">
            <summary>
             "default_timezone": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Iso8601.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "default_timezone": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Iso8601.OptArg(System.String,System.Object)">
            <summary>
             "default_timezone": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Iso8601.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Iso8601.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.January.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.January.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Javascript.Item(System.Object)">
            <summary>
             "timeout": "T_NUM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Javascript.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "timeout": "T_NUM"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Javascript.OptArg(System.String,System.Object)">
            <summary>
             "timeout": "T_NUM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Javascript.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Javascript.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Json.#ctor(System.Object)">
            <summary>
            <para>Parse a JSON string on the server.</para>
            </summary>
            <example><para>Example: Send an array to the server.</para>
            <code>r.json("[1,2,3]").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Json.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Parse a JSON string on the server.</para>
            </summary>
            <example><para>Example: Send an array to the server.</para>
            <code>r.json("[1,2,3]").run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Json.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Parse a JSON string on the server.</para>
            </summary>
            <example><para>Example: Send an array to the server.</para>
            <code>r.json("[1,2,3]").run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Json.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Json.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.July.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.July.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.June.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.June.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Keys.#ctor(System.Object)">
            <summary>
            <para>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href="/docs/data-types/#sorting-order">ReQL data types</a> (for strings, lexicographically).</para>
            </summary>
            <example><para>Example: Get all the keys from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).keys().run(conn, callback);
            // Result passed to callback
            [ "id", "mail", "name" ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Keys.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href="/docs/data-types/#sorting-order">ReQL data types</a> (for strings, lexicographically).</para>
            </summary>
            <example><para>Example: Get all the keys from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).keys().run(conn, callback);
            // Result passed to callback
            [ "id", "mail", "name" ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Keys.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href="/docs/data-types/#sorting-order">ReQL data types</a> (for strings, lexicographically).</para>
            </summary>
            <example><para>Example: Get all the keys from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).keys().run(conn, callback);
            // Result passed to callback
            [ "id", "mail", "name" ]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Keys.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Keys.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Le.#ctor(System.Object)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or less.</para>
            <code>r.table('players').get(1)('score').le(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Le.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or less.</para>
            <code>r.table('players').get(1)('score').le(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Le.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored 10 points or less.</para>
            <code>r.table('players').get(1)('score').le(10).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Le.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Le.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Limit.#ctor(System.Object)">
            <summary>
            <para>End the sequence after the given number of elements.</para>
            </summary>
            <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
            <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Limit.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>End the sequence after the given number of elements.</para>
            </summary>
            <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
            <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Limit.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>End the sequence after the given number of elements.</para>
            </summary>
            <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
            <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Limit.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Limit.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Line.#ctor(System.Object)">
            <summary>
            <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
            <ul>
            <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line's vertices;</li>
            <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a line.</para>
            <code>r.table('geo').insert({
                id: 101,
                route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Line.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
            <ul>
            <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line's vertices;</li>
            <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a line.</para>
            <code>r.table('geo').insert({
                id: 101,
                route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Line.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
            <ul>
            <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line's vertices;</li>
            <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a line.</para>
            <code>r.table('geo').insert({
                id: 101,
                route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Line.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Line.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Literal.#ctor(System.Object)">
            <summary>
            <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
            </summary>
            <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
            <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
            
            // Result passed to callback
            {
                "id": 1,
                "name": "Alice",
                "data": {
                    "age": 19,
                    "job": "Engineer"
                }
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Literal.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
            </summary>
            <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
            <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
            
            // Result passed to callback
            {
                "id": 1,
                "name": "Alice",
                "data": {
                    "age": 19,
                    "job": "Engineer"
                }
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Literal.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
            </summary>
            <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
            <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
            
            // Result passed to callback
            {
                "id": 1,
                "name": "Alice",
                "data": {
                    "age": 19,
                    "job": "Engineer"
                }
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Literal.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Literal.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Lt.#ctor(System.Object)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored less than 10 points.</para>
            <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Lt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored less than 10 points.</para>
            <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Lt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
            </summary>
            <example><para>Example: Test if a player has scored less than 10 points.</para>
            <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Lt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Lt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.MakeArray.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.MakeArray.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.MakeObj.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.MakeObj.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Map.#ctor(System.Object)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Map.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Map.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
            </summary>
            <example><para>Example: Return the first five squares.</para>
            <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
                return val.mul(val);
            }).run(conn, callback);
            // Result passed to callback
            [1, 4, 9, 16, 25]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Map.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Map.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.March.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.March.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Match.#ctor(System.Object)">
            <summary>
            <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
            <ul>
            <li><code>str</code>: The matched string</li>
            <li><code>start</code>: The matched string's start</li>
            <li><code>end</code>: The matched string's end</li>
            <li><code>groups</code>: The capture groups defined with parentheses</li>
            </ul>
            <para>If no match is found, returns <code>null</code>.</para>
            </summary>
            <example><para>Example: Get all users whose name starts with "A". Because <code>null</code> evaluates to <code>false</code> in
            <a href="/api/javascript/filter/">filter</a>, you can just use the result of <code>match</code> for the predicate.</para>
            <code>r.table('users').filter(function(doc){
                return doc('name').match("^A")
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Match.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
            <ul>
            <li><code>str</code>: The matched string</li>
            <li><code>start</code>: The matched string's start</li>
            <li><code>end</code>: The matched string's end</li>
            <li><code>groups</code>: The capture groups defined with parentheses</li>
            </ul>
            <para>If no match is found, returns <code>null</code>.</para>
            </summary>
            <example><para>Example: Get all users whose name starts with "A". Because <code>null</code> evaluates to <code>false</code> in
            <a href="/api/javascript/filter/">filter</a>, you can just use the result of <code>match</code> for the predicate.</para>
            <code>r.table('users').filter(function(doc){
                return doc('name').match("^A")
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Match.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
            <ul>
            <li><code>str</code>: The matched string</li>
            <li><code>start</code>: The matched string's start</li>
            <li><code>end</code>: The matched string's end</li>
            <li><code>groups</code>: The capture groups defined with parentheses</li>
            </ul>
            <para>If no match is found, returns <code>null</code>.</para>
            </summary>
            <example><para>Example: Get all users whose name starts with "A". Because <code>null</code> evaluates to <code>false</code> in
            <a href="/api/javascript/filter/">filter</a>, you can just use the result of <code>match</code> for the predicate.</para>
            <code>r.table('users').filter(function(doc){
                return doc('name').match("^A")
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Match.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Match.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Max.#ctor(System.Object)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Max.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Max.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Finds the maximum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).max().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Max.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Max.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Max.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Max.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Max.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Maxval.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Maxval.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.May.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.May.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Merge.#ctor(System.Object)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Merge.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Merge.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
            </summary>
            <example><para>Example: Equip Thor for battle.</para>
            <code>r.table('marvel').get('thor').merge(
                r.table('equipment').get('hammer'),
                r.table('equipment').get('pimento_sandwich')
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Merge.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Merge.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Min.#ctor(System.Object)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Min.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Min.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Finds the minimum element of a sequence.</para>
            </summary>
            <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
            <code>r.expr([3, 5, 7]).min().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Min.Item(System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Min.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Min.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Min.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Min.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Minutes.#ctor(System.Object)">
            <summary>
            <para>Return the minute in a time object as a number between 0 and 59.</para>
            </summary>
            <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").minutes().lt(10)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Minutes.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the minute in a time object as a number between 0 and 59.</para>
            </summary>
            <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").minutes().lt(10)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Minutes.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the minute in a time object as a number between 0 and 59.</para>
            </summary>
            <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").minutes().lt(10)
            })
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Minutes.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Minutes.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Minval.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Minval.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mod.#ctor(System.Object)">
            <summary>
            
            </summary>
            <example><para>Example: It's as easy as 2 % 2 = 0.</para>
            <code>r.expr(2).mod(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mod.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            
            </summary>
            <example><para>Example: It's as easy as 2 % 2 = 0.</para>
            <code>r.expr(2).mod(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mod.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            
            </summary>
            <example><para>Example: It's as easy as 2 % 2 = 0.</para>
            <code>r.expr(2).mod(2).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Mod.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Mod.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Monday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Monday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Month.#ctor(System.Object)">
            <summary>
            <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born in November.</para>
            <code>r.table("users").filter(
                r.row("birthdate").month().eq(11)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Month.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born in November.</para>
            <code>r.table("users").filter(
                r.row("birthdate").month().eq(11)
            )
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Month.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
            </summary>
            <example><para>Example: Retrieve all the users who were born in November.</para>
            <code>r.table("users").filter(
                r.row("birthdate").month().eq(11)
            )
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Month.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Month.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mul.#ctor(System.Object)">
            <summary>
            <para>Multiply two numbers, or make a periodic array.</para>
            </summary>
            <example><para>Example: It's as easy as 2 * 2 = 4.</para>
            <code>r.expr(2).mul(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mul.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Multiply two numbers, or make a periodic array.</para>
            </summary>
            <example><para>Example: It's as easy as 2 * 2 = 4.</para>
            <code>r.expr(2).mul(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Mul.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Multiply two numbers, or make a periodic array.</para>
            </summary>
            <example><para>Example: It's as easy as 2 * 2 = 4.</para>
            <code>r.expr(2).mul(2).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Mul.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Mul.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ne.#ctor(System.Object)">
            <summary>
            <para>Test if two or more values are not equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ne.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Test if two or more values are not equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ne.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Test if two or more values are not equal.</para>
            </summary>
            <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
            <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ne.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ne.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Not.#ctor(System.Object)">
            <summary>
            <para>Compute the logical inverse (not) of an expression.</para>
            </summary>
            <example><para>Example: Not true is false.</para>
            <code>r(true).not().run(conn, callback)
            r.not(true).run(conn, callback)
            </code>
            <para>These evaluate to <code>false</code>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Not.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compute the logical inverse (not) of an expression.</para>
            </summary>
            <example><para>Example: Not true is false.</para>
            <code>r(true).not().run(conn, callback)
            r.not(true).run(conn, callback)
            </code>
            <para>These evaluate to <code>false</code>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Not.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compute the logical inverse (not) of an expression.</para>
            </summary>
            <example><para>Example: Not true is false.</para>
            <code>r(true).not().run(conn, callback)
            r.not(true).run(conn, callback)
            </code>
            <para>These evaluate to <code>false</code>.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Not.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Not.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.November.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.November.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Now.#ctor(System.Object)">
            <summary>
            <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
            </summary>
            <example><para>Example: Add a new user with the time at which he subscribed.</para>
            <code>r.table("users").insert({
                name: "John",
                subscription_date: r.now()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Now.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
            </summary>
            <example><para>Example: Add a new user with the time at which he subscribed.</para>
            <code>r.table("users").insert({
                name: "John",
                subscription_date: r.now()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Now.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
            </summary>
            <example><para>Example: Add a new user with the time at which he subscribed.</para>
            <code>r.table("users").insert({
                name: "John",
                subscription_date: r.now()
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Now.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Now.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Nth.#ctor(System.Object)">
            <summary>
            <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
            </summary>
            <example><para>Example: Select the second element in the array.</para>
            <code>r.expr([1,2,3]).nth(1).run(conn, callback)
            r.expr([1,2,3])(1).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Nth.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
            </summary>
            <example><para>Example: Select the second element in the array.</para>
            <code>r.expr([1,2,3]).nth(1).run(conn, callback)
            r.expr([1,2,3])(1).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Nth.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
            </summary>
            <example><para>Example: Select the second element in the array.</para>
            <code>r.expr([1,2,3]).nth(1).run(conn, callback)
            r.expr([1,2,3])(1).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Nth.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Nth.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.October.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.October.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OffsetsOf.#ctor(System.Object)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OffsetsOf.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OffsetsOf.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
            </summary>
            <example><para>Example: Find the position of the letter 'c'.</para>
            <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OffsetsOf.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OffsetsOf.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Or.#ctor(System.Object)">
            <summary>
            <para>Compute the logical "or" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).or(b).run(conn, callback);
            // result passed to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Or.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Compute the logical "or" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).or(b).run(conn, callback);
            // result passed to callback
            true
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Or.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Compute the logical "or" of one or more values.</para>
            </summary>
            <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
            <code>var a = true, b = false;
            r.expr(a).or(b).run(conn, callback);
            // result passed to callback
            true
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Or.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Or.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OrderBy.#ctor(System.Object)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OrderBy.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OrderBy.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Sort the sequence by document values of the given key(s). To specify
            the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
            (defaults to ascending).</para>
            </summary>
            <example><para>Example: Order all the posts using the index <code>date</code>.</para>
            <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OrderBy.Item(System.Object)">
            <summary>
             "index": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OrderBy.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "index": "T_EXPR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OrderBy.OptArg(System.String,System.Object)">
            <summary>
             "index": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OrderBy.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OrderBy.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OuterJoin.#ctor(System.Object)">
            <summary>
            <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
            </summary>
            <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
            <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).run(conn, callback)
            </code>
            <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OuterJoin.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
            </summary>
            <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
            <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).run(conn, callback)
            </code>
            <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.OuterJoin.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
            </summary>
            <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
            <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
                return marvelRow('strength').lt(dcRow('strength'))
            }).run(conn, callback)
            </code>
            <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OuterJoin.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.OuterJoin.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Pluck.#ctor(System.Object)">
            <summary>
            <para>Plucks out one or more attributes from either an object or a sequence of objects
            (projection).</para>
            </summary>
            <example><para>Example: We just need information about IronMan's reactor and not the rest of the
            document.</para>
            <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Pluck.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Plucks out one or more attributes from either an object or a sequence of objects
            (projection).</para>
            </summary>
            <example><para>Example: We just need information about IronMan's reactor and not the rest of the
            document.</para>
            <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Pluck.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Plucks out one or more attributes from either an object or a sequence of objects
            (projection).</para>
            </summary>
            <example><para>Example: We just need information about IronMan's reactor and not the rest of the
            document.</para>
            <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Pluck.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Pluck.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Point.#ctor(System.Object)">
            <summary>
            <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (-180 to 180) and latitude (-90 to 90) of the point on a perfect sphere. See <a href="/docs/geo-support/">Geospatial support</a> for more information on ReQL's coordinate system.</para>
            </summary>
            <example><para>Example: Define a point.</para>
            <code>r.table('geo').insert({
                id: 1,
                name: 'San Francisco',
                location: r.point(-122.423246,37.779388)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Point.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (-180 to 180) and latitude (-90 to 90) of the point on a perfect sphere. See <a href="/docs/geo-support/">Geospatial support</a> for more information on ReQL's coordinate system.</para>
            </summary>
            <example><para>Example: Define a point.</para>
            <code>r.table('geo').insert({
                id: 1,
                name: 'San Francisco',
                location: r.point(-122.423246,37.779388)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Point.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (-180 to 180) and latitude (-90 to 90) of the point on a perfect sphere. See <a href="/docs/geo-support/">Geospatial support</a> for more information on ReQL's coordinate system.</para>
            </summary>
            <example><para>Example: Define a point.</para>
            <code>r.table('geo').insert({
                id: 1,
                name: 'San Francisco',
                location: r.point(-122.423246,37.779388)
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Point.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Point.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Polygon.#ctor(System.Object)">
            <summary>
            <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
            <ul>
            <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon's vertices;</li>
            <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a polygon.</para>
            <code>r.table('geo').insert({
                id: 101,
                rectangle: r.polygon(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Polygon.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
            <ul>
            <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon's vertices;</li>
            <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a polygon.</para>
            <code>r.table('geo').insert({
                id: 101,
                rectangle: r.polygon(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Polygon.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
            <ul>
            <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon's vertices;</li>
            <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
            </ul>
            </summary>
            <example><para>Example: Define a polygon.</para>
            <code>r.table('geo').insert({
                id: 101,
                rectangle: r.polygon(
                    [-122.423246,37.779388],
                    [-122.423246,37.329898],
                    [-121.886420,37.329898],
                    [-121.886420,37.779388]
                )
            }).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Polygon.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Polygon.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PolygonSub.#ctor(System.Object)">
            <summary>
            <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
            </summary>
            <example><para>Example: Define a polygon with a hole punched in it.</para>
            <code>var outerPolygon = r.polygon(
                [-122.4,37.7],
                [-122.4,37.3],
                [-121.8,37.3],
                [-121.8,37.7]
            );
            var innerPolygon = r.polygon(
                [-122.3,37.4],
                [-122.3,37.6],
                [-122.0,37.6],
                [-122.0,37.4]
            );
            outerPolygon.polygonSub(innerPolygon).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PolygonSub.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
            </summary>
            <example><para>Example: Define a polygon with a hole punched in it.</para>
            <code>var outerPolygon = r.polygon(
                [-122.4,37.7],
                [-122.4,37.3],
                [-121.8,37.3],
                [-121.8,37.7]
            );
            var innerPolygon = r.polygon(
                [-122.3,37.4],
                [-122.3,37.6],
                [-122.0,37.6],
                [-122.0,37.4]
            );
            outerPolygon.polygonSub(innerPolygon).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.PolygonSub.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
            </summary>
            <example><para>Example: Define a polygon with a hole punched in it.</para>
            <code>var outerPolygon = r.polygon(
                [-122.4,37.7],
                [-122.4,37.3],
                [-121.8,37.3],
                [-121.8,37.7]
            );
            var innerPolygon = r.polygon(
                [-122.3,37.4],
                [-122.3,37.6],
                [-122.0,37.6],
                [-122.0,37.4]
            );
            outerPolygon.polygonSub(innerPolygon).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PolygonSub.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.PolygonSub.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Prepend.#ctor(System.Object)">
            <summary>
            <para>Prepend a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Prepend.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Prepend a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Prepend.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Prepend a value to an array.</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Prepend.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Prepend.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Random.#ctor(System.Object)">
            <summary>
            <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
            <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
            <code>r.random().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Random.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
            <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
            <code>r.random().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Random.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
            </summary>
            <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
            <code>r.random().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Random.Item(System.Object)">
            <summary>
             "float": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Random.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "float": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Random.OptArg(System.String,System.Object)">
            <summary>
             "float": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Random.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Random.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Range.#ctor(System.Object)">
            <summary>
            <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
            <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
            <code>&gt; r.range(4).run(conn, callback)
            // result returned to callback
            [0, 1, 2, 3]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Range.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
            <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
            <code>&gt; r.range(4).run(conn, callback)
            // result returned to callback
            [0, 1, 2, 3]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Range.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Generate a stream of sequential integers in a specified range.</para>
            </summary>
            <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
            <code>&gt; r.range(4).run(conn, callback)
            // result returned to callback
            [0, 1, 2, 3]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Range.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Range.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Rebalance.#ctor(System.Object)">
            <summary>
            <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
            </summary>
            <example><para>Example: Rebalance a table.</para>
            <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Rebalance.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
            </summary>
            <example><para>Example: Rebalance a table.</para>
            <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Rebalance.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
            </summary>
            <example><para>Example: Rebalance a table.</para>
            <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Rebalance.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Rebalance.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reconfigure.#ctor(System.Object)">
            <summary>
            <para>Reconfigure a table's sharding and replication.</para>
            </summary>
            <example><para>Example: Reconfigure a table.</para>
            <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reconfigure.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Reconfigure a table's sharding and replication.</para>
            </summary>
            <example><para>Example: Reconfigure a table.</para>
            <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reconfigure.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Reconfigure a table's sharding and replication.</para>
            </summary>
            <example><para>Example: Reconfigure a table.</para>
            <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reconfigure.Item(System.Object)">
            <summary>
             "shards": "T_NUM",
              "replicas": [
                "T_OBJECT",
                "T_NUM"
              ],
              "primary_replica_tag": "T_STR",
              "dry_run": "T_BOOL",
              "nonvoting_replica_tags": "T_ARRAY",
              "emergency_repair": "E_EMERGENCY_REPAIR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reconfigure.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "shards": "T_NUM",
              "replicas": [
                "T_OBJECT",
                "T_NUM"
              ],
              "primary_replica_tag": "T_STR",
              "dry_run": "T_BOOL",
              "nonvoting_replica_tags": "T_ARRAY",
              "emergency_repair": "E_EMERGENCY_REPAIR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reconfigure.OptArg(System.String,System.Object)">
            <summary>
             "shards": "T_NUM",
              "replicas": [
                "T_OBJECT",
                "T_NUM"
              ],
              "primary_replica_tag": "T_STR",
              "dry_run": "T_BOOL",
              "nonvoting_replica_tags": "T_ARRAY",
              "emergency_repair": "E_EMERGENCY_REPAIR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reconfigure.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reconfigure.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reduce.#ctor(System.Object)">
            <summary>
            <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
            <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
            <code>r.table("posts").map(function(doc) {
                return 1;
            }).reduce(function(left, right) {
                return left.add(right);
            }).default(0).run(conn, callback);
            </code>
            <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reduce.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
            <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
            <code>r.table("posts").map(function(doc) {
                return 1;
            }).reduce(function(left, right) {
                return left.add(right);
            }).default(0).run(conn, callback);
            </code>
            <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Reduce.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
            </summary>
            <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
            <code>r.table("posts").map(function(doc) {
                return 1;
            }).reduce(function(left, right) {
                return left.add(right);
            }).default(0).run(conn, callback);
            </code>
            <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reduce.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Reduce.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Replace.#ctor(System.Object)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Replace.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Replace.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
            and replaces the original document with the new one. The new document must
            have the same primary key as the original document.</para>
            </summary>
            <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
            <code>r.table("posts").get(1).replace({
                id: 1,
                title: "Lorem ipsum",
                content: "Aleas jacta est",
                status: "draft"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Replace.Item(System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Replace.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Replace.OptArg(System.String,System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Replace.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Replace.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlObject.#ctor(System.Object)">
            <summary>
            <para>Creates an object from a list of key-value pairs, where the keys must
            be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
            <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
            </summary>
            <example><para>Example: Create a simple object.</para>
            <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
            </code>
            <para>Result:</para>
            <code>{data: ["foo", "bar"], id: 5}
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlObject.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Creates an object from a list of key-value pairs, where the keys must
            be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
            <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
            </summary>
            <example><para>Example: Create a simple object.</para>
            <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
            </code>
            <para>Result:</para>
            <code>{data: ["foo", "bar"], id: 5}
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ReqlObject.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Creates an object from a list of key-value pairs, where the keys must
            be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
            <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
            </summary>
            <example><para>Example: Create a simple object.</para>
            <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
            </code>
            <para>Result:</para>
            <code>{data: ["foo", "bar"], id: 5}
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ReqlObject.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ReqlObject.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Round.#ctor(System.Object)">
            <summary>
            <para>Rounds the given value to the nearest whole integer.</para>
            </summary>
            <example><para>Example: Round 12.345 to the nearest integer.</para>
            <code>r.round(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>round</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Round.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Rounds the given value to the nearest whole integer.</para>
            </summary>
            <example><para>Example: Round 12.345 to the nearest integer.</para>
            <code>r.round(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>round</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Round.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Rounds the given value to the nearest whole integer.</para>
            </summary>
            <example><para>Example: Round 12.345 to the nearest integer.</para>
            <code>r.round(12.345).run(conn, callback);
            // Result passed to callback
            12.0
            </code>
            <para>The <code>round</code> command can also be chained after an expression.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Round.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Round.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sample.#ctor(System.Object)">
            <summary>
            <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
            </summary>
            <example><para>Example: Select 3 random heroes.</para>
            <code>r.table('marvel').sample(3).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sample.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
            </summary>
            <example><para>Example: Select 3 random heroes.</para>
            <code>r.table('marvel').sample(3).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sample.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
            </summary>
            <example><para>Example: Select 3 random heroes.</para>
            <code>r.table('marvel').sample(3).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sample.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sample.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Saturday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Saturday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Seconds.#ctor(System.Object)">
            <summary>
            <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
            </summary>
            <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").seconds().lt(30)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Seconds.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
            </summary>
            <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").seconds().lt(30)
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Seconds.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
            </summary>
            <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
            <code>r.table("posts").filter(function(post) {
                return post("date").seconds().lt(30)
            })
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Seconds.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Seconds.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.September.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.September.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetDifference.#ctor(System.Object)">
            <summary>
            <para>Remove the elements of one array from another and return them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetDifference.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Remove the elements of one array from another and return them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetDifference.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Remove the elements of one array from another and return them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetDifference.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetDifference.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetInsert.#ctor(System.Object)">
            <summary>
            <para>Add a value to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetInsert.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Add a value to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetInsert.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Add a value to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetInsert.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetInsert.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetIntersection.#ctor(System.Object)">
            <summary>
            <para>Intersect two arrays returning values that occur in both of them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetIntersection.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Intersect two arrays returning values that occur in both of them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetIntersection.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Intersect two arrays returning values that occur in both of them as a set (an array with
            distinct values).</para>
            </summary>
            <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetIntersection.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetIntersection.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetUnion.#ctor(System.Object)">
            <summary>
            <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetUnion.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SetUnion.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
            </summary>
            <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
            <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetUnion.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SetUnion.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Skip.#ctor(System.Object)">
            <summary>
            <para>Skip a number of elements from the head of the sequence.</para>
            </summary>
            <example><para>Example: Here in conjunction with <a href="/api/javascript/order_by/">orderBy</a> we choose to ignore the most successful heroes.</para>
            <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Skip.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Skip a number of elements from the head of the sequence.</para>
            </summary>
            <example><para>Example: Here in conjunction with <a href="/api/javascript/order_by/">orderBy</a> we choose to ignore the most successful heroes.</para>
            <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Skip.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Skip a number of elements from the head of the sequence.</para>
            </summary>
            <example><para>Example: Here in conjunction with <a href="/api/javascript/order_by/">orderBy</a> we choose to ignore the most successful heroes.</para>
            <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Skip.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Skip.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Slice.#ctor(System.Object)">
            <summary>
            <para>Return the elements of a sequence within the specified range.</para>
            </summary>
            <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
            <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Slice.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the elements of a sequence within the specified range.</para>
            </summary>
            <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
            <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Slice.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the elements of a sequence within the specified range.</para>
            </summary>
            <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
            <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Slice.Item(System.Object)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Slice.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Slice.OptArg(System.String,System.Object)">
            <summary>
             "left_bound": "E_BOUND",
              "right_bound": "E_BOUND"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Slice.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Slice.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SpliceAt.#ctor(System.Object)">
            <summary>
            <para>Insert several values in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk and Thor decide to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SpliceAt.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Insert several values in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk and Thor decide to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.SpliceAt.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Insert several values in to an array at a given index. Returns the modified array.</para>
            </summary>
            <example><para>Example: Hulk and Thor decide to join the avengers.</para>
            <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SpliceAt.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.SpliceAt.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Split.#ctor(System.Object)">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Split.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Split.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Splits a string into substrings.  Splits on whitespace when called
            with no arguments.  When called with a separator, splits on that
            separator.  When called with a separator and a maximum number of
            splits, splits on that separator at most <code>max_splits</code> times.  (Can be
            called with <code>null</code> as the separator if you want to split on whitespace
            while still specifying <code>max_splits</code>.)</para>
            </summary>
            <example><para>Example: Split on whitespace.</para>
            <code>r.expr("foo  bar bax").split().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>["foo", "bar", "bax"]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Split.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Split.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Status.#ctor(System.Object)">
            <summary>
            <para>Return the status of a table.</para>
            </summary>
            <example><para>Example: Get a table's status.</para>
            <code>&gt; r.table('superheroes').status().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Status.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the status of a table.</para>
            </summary>
            <example><para>Example: Get a table's status.</para>
            <code>&gt; r.table('superheroes').status().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Status.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the status of a table.</para>
            </summary>
            <example><para>Example: Get a table's status.</para>
            <code>&gt; r.table('superheroes').status().run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Status.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Status.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sub.#ctor(System.Object)">
            <summary>
            <para>Subtract two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 - 2 = 0.</para>
            <code>r.expr(2).sub(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sub.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Subtract two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 - 2 = 0.</para>
            <code>r.expr(2).sub(2).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sub.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Subtract two numbers.</para>
            </summary>
            <example><para>Example: It's as easy as 2 - 2 = 0.</para>
            <code>r.expr(2).sub(2).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sub.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sub.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sum.#ctor(System.Object)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sum.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sum.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Sums all the elements of a sequence.  If called with a field name,
            sums all the values of that field in the sequence, skipping elements
            of the sequence that lack that field.  If called with a function,
            calls that function on every element of the sequence and sums the
            results, skipping elements of the sequence where that function returns
            <code>null</code> or a non-existence error.</para>
            </summary>
            <example><para>Example: What's 3 + 5 + 7?</para>
            <code>r.expr([3, 5, 7]).sum().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sum.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sum.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sunday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sunday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sync.#ctor(System.Object)">
            <summary>
            <para><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries
            that specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so
            <code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return
            until all previous writes to the table are persisted.</para>
            </summary>
            <example><para>Example: After having updated multiple heroes with soft durability, we now want to wait
            until these changes are persisted.</para>
            <code>r.table('marvel').sync().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sync.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries
            that specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so
            <code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return
            until all previous writes to the table are persisted.</para>
            </summary>
            <example><para>Example: After having updated multiple heroes with soft durability, we now want to wait
            until these changes are persisted.</para>
            <code>r.table('marvel').sync().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Sync.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries
            that specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so
            <code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return
            until all previous writes to the table are persisted.</para>
            </summary>
            <example><para>Example: After having updated multiple heroes with soft durability, we now want to wait
            until these changes are persisted.</para>
            <code>r.table('marvel').sync().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sync.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Sync.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.#ctor(System.Object)">
            <summary>
            <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
            </summary>
            <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
            <code>r.table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
            </summary>
            <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
            <code>r.table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
            </summary>
            <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
            <code>r.table('marvel').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Table.Item(System.Object)">
            <summary>
             "read_mode": "E_READ_MODE",
              "identifier_format": "E_IDENTIFIER_FORMAT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Table.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "read_mode": "E_READ_MODE",
              "identifier_format": "E_IDENTIFIER_FORMAT"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.OptArg(System.String,System.Object)">
            <summary>
             "read_mode": "E_READ_MODE",
              "identifier_format": "E_IDENTIFIER_FORMAT"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Table.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Table.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Get(System.Object)">
            <summary>
            <para>Get a document by primary key.</para>
            </summary>
            <example><para>Example: Find a document by UUID.</para>
            <code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.GetAll(System.Object[])">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.GetAll(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.GetAll(System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            <para>Get all documents where the given value matches the value of the requested index.</para>
            </summary>
            <example><para>Example: Secondary index keys are not guaranteed to be unique so we cannot query via <a href="/api/javascript/get/">get</a> when using a secondary index.</para>
            <code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Insert(System.Object)">
            <summary>
            <para>Insert documents into a table. Accepts a single document or an array of
            documents.</para>
            </summary>
            <example><para>Example: Insert a document into the table <code>posts</code>.</para>
            <code>r.table("posts").insert({
                id: 1,
                title: "Lorem ipsum",
                content: "Dolor sit amet"
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Config">
            <summary>
            <para>Query (read and/or update) the configurations for individual tables or databases.</para>
            </summary>
            <example><para>Example: Get the configuration for the <code>users</code> table.</para>
            <code>&gt; r.table('users').config().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Status">
            <summary>
            <para>Return the status of a table.</para>
            </summary>
            <example><para>Example: Get a table's status.</para>
            <code>&gt; r.table('superheroes').status().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Wait_">
            <summary>
            <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
            </summary>
            <example><para>Example: Wait on a table to be ready.</para>
            <code>&gt; r.table('superheroes').wait().run(conn, callback);
            // Result passed to callback
            { "ready": 1 }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Reconfigure">
            <summary>
            <para>Reconfigure a table's sharding and replication.</para>
            </summary>
            <example><para>Example: Reconfigure a table.</para>
            <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Rebalance">
            <summary>
            <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
            </summary>
            <example><para>Example: Rebalance a table.</para>
            <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Sync">
            <summary>
            <para><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries
            that specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so
            <code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return
            until all previous writes to the table are persisted.</para>
            </summary>
            <example><para>Example: After having updated multiple heroes with soft durability, we now want to wait
            until these changes are persisted.</para>
            <code>r.table('marvel').sync().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.Grant(System.Object,System.Object)">
            <summary>
            <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
            </summary>
            <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
            <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
            
            // Result passed to callback
            {
                "granted": 1,
                "permissions_changes": [
                    {
                        "new_val": { "read": true, "write": true },
                        "old_val": { null }
                    }
                ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexCreate(System.Object)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexCreate(System.Object,RethinkDb.Driver.Ast.Javascript)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexCreate(System.Object,System.Object)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexCreate(System.Object,RethinkDb.Driver.Ast.ReqlFunction0)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexCreate(System.Object,RethinkDb.Driver.Ast.ReqlFunction1)">
            <summary>
            <para>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article "<a href="/docs/secondary-indexes/">Using secondary indexes in RethinkDB</a>."</para>
            </summary>
            <example><para>Example: Create a simple index based on the field <code>postId</code>.</para>
            <code>r.table('comments').indexCreate('postId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexDrop(System.Object)">
            <summary>
            <para>Delete a previously created secondary index of this table.</para>
            </summary>
            <example><para>Example: Drop a secondary index named 'code_name'.</para>
            <code>r.table('dc').indexDrop('code_name').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexList">
            <summary>
            <para>List all the secondary indexes of this table.</para>
            </summary>
            <example><para>Example: List the available secondary indexes for this table.</para>
            <code>r.table('marvel').indexList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexStatus(System.Object[])">
            <summary>
            <para>Get the status of the specified indexes on this table, or the status
            of all indexes on this table if no indexes are specified.</para>
            </summary>
            <example><para>Example: Get the status of all the indexes on <code>test</code>:</para>
            <code>r.table('test').indexStatus().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexStatus(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Get the status of the specified indexes on this table, or the status
            of all indexes on this table if no indexes are specified.</para>
            </summary>
            <example><para>Example: Get the status of all the indexes on <code>test</code>:</para>
            <code>r.table('test').indexStatus().run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexWait(System.Object[])">
            <summary>
            <para>Wait for the specified indexes on this table to be ready, or for all
            indexes on this table to be ready if no indexes are specified.</para>
            </summary>
            <example><para>Example: Wait for all indexes on the table <code>test</code> to be ready:</para>
            <code>r.table('test').indexWait().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexWait(System.Collections.Generic.ICollection{System.String})">
            <summary>
            <para>Wait for the specified indexes on this table to be ready, or for all
            indexes on this table to be ready if no indexes are specified.</para>
            </summary>
            <example><para>Example: Wait for all indexes on the table <code>test</code> to be ready:</para>
            <code>r.table('test').indexWait().run(conn, callback)
            </code></example>
            <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.IndexRename(System.Object,System.Object)">
            <summary>
            <para>Rename an existing secondary index on a table. If the optional argument <code>overwrite</code> is specified as <code>true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code>overwrite</code> is <code>false</code> (the default) an error will be raised if the new index name already exists.</para>
            </summary>
            <example><para>Example: Rename an index on the comments table.</para>
            <code>r.table('comments').indexRename('postId', 'messageId').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.GetIntersecting(System.Object)">
            <summary>
            <para>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</para>
            </summary>
            <example><para>Example: Which of the locations in a list of parks intersect <code>circle1</code>?</para>
            <code>var circle1 = r.circle([-117.220406,32.719464], 10, {unit: 'mi'});
            r.table('parks').getIntersecting(circle1, {index: 'area'}).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Table.GetNearest(System.Object)">
            <summary>
            <para>Get all documents where the specified geospatial index is within a certain distance of the specified point (default 100 kilometers).</para>
            </summary>
            <example><para>Example: Return a list of enemy hideouts within 5000 meters of the secret base.</para>
            <code>var secretBase = r.point(-122.422876,37.777128);
            r.table('hideouts').getNearest(secretBase,
                {index: 'location', maxDist: 5000}
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableCreate.#ctor(System.Object)">
            <summary>
            <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
            </summary>
            <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
            <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "old_val": null
                    }
                ],
                "tables_created": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableCreate.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
            </summary>
            <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
            <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "old_val": null
                    }
                ],
                "tables_created": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableCreate.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
            </summary>
            <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
            <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "new_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "old_val": null
                    }
                ],
                "tables_created": 1
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableCreate.Item(System.Object)">
            <summary>
             "primary_key": "T_STR",
              "durability": "E_DURABILITY",
              "shards": "T_NUM",
              "replicas": [
                "T_NUM",
                "T_OBJECT"
              ],
              "primary_replica_tag": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableCreate.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "primary_key": "T_STR",
              "durability": "E_DURABILITY",
              "shards": "T_NUM",
              "replicas": [
                "T_NUM",
                "T_OBJECT"
              ],
              "primary_replica_tag": "T_STR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableCreate.OptArg(System.String,System.Object)">
            <summary>
             "primary_key": "T_STR",
              "durability": "E_DURABILITY",
              "shards": "T_NUM",
              "replicas": [
                "T_NUM",
                "T_OBJECT"
              ],
              "primary_replica_tag": "T_STR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableCreate.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableCreate.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableDrop.#ctor(System.Object)">
            <summary>
            <para>Drop a table from a database. The table and all its data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a table named 'dc_universe'.</para>
            <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableDrop.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Drop a table from a database. The table and all its data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a table named 'dc_universe'.</para>
            <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 1
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableDrop.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Drop a table from a database. The table and all its data will be deleted.</para>
            </summary>
            <example><para>Example: Drop a table named 'dc_universe'.</para>
            <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
            // Result passed to callback
            {
                "config_changes": [
                    {
                        "old_val": {
                            "db": "test",
                            "durability":  "hard",
                            "id": "20ea60d4-3b76-4817-8828-98a236df0297",
                            "name": "dc_universe",
                            "primary_key": "id",
                            "shards": [
                                {
                                    "primary_replica": "rethinkdb_srv1",
                                    "replicas": [
                                        "rethinkdb_srv1",
                                        "rethinkdb_srv2"
                                    ]
                                }
                            ],
                            "write_acks": "majority"
                        },
                        "new_val": null
                    }
                ],
                "tables_dropped": 1
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableDrop.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableDrop.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableList.#ctor(System.Object)">
            <summary>
            <para>List all table names in a database. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all tables of the 'test' database.</para>
            <code>r.db('test').tableList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableList.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>List all table names in a database. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all tables of the 'test' database.</para>
            <code>r.db('test').tableList().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TableList.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>List all table names in a database. The result is a list of strings.</para>
            </summary>
            <example><para>Example: List all tables of the 'test' database.</para>
            <code>r.db('test').tableList().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableList.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TableList.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Thursday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Thursday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Time.#ctor(System.Object)">
            <summary>
            <para>Create a time object for a specific time.</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
            <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Time.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Create a time object for a specific time.</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
            <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Time.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Create a time object for a specific time.</para>
            </summary>
            <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
            <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Time.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Time.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TimeOfDay.#ctor(System.Object)">
            <summary>
            <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
            </summary>
            <example><para>Example: Retrieve posts that were submitted before noon.</para>
            <code>r.table("posts").filter(
                r.row("date").timeOfDay().le(12*60*60)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TimeOfDay.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
            </summary>
            <example><para>Example: Retrieve posts that were submitted before noon.</para>
            <code>r.table("posts").filter(
                r.row("date").timeOfDay().le(12*60*60)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TimeOfDay.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
            </summary>
            <example><para>Example: Retrieve posts that were submitted before noon.</para>
            <code>r.table("posts").filter(
                r.row("date").timeOfDay().le(12*60*60)
            ).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TimeOfDay.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TimeOfDay.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Timezone.#ctor(System.Object)">
            <summary>
            <para>Return the timezone of the time object.</para>
            </summary>
            <example><para>Example: Return all the users in the "-07:00" timezone.</para>
            <code>r.table("users").filter( function(user) {
                return user("subscriptionDate").timezone().eq("-07:00")
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Timezone.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the timezone of the time object.</para>
            </summary>
            <example><para>Example: Return all the users in the "-07:00" timezone.</para>
            <code>r.table("users").filter( function(user) {
                return user("subscriptionDate").timezone().eq("-07:00")
            })
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Timezone.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the timezone of the time object.</para>
            </summary>
            <example><para>Example: Return all the users in the "-07:00" timezone.</para>
            <code>r.table("users").filter( function(user) {
                return user("subscriptionDate").timezone().eq("-07:00")
            })
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Timezone.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Timezone.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToEpochTime.#ctor(System.Object)">
            <summary>
            <para>Convert a time object to its epoch time.</para>
            </summary>
            <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
            <code>r.now().toEpochTime()
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToEpochTime.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a time object to its epoch time.</para>
            </summary>
            <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
            <code>r.now().toEpochTime()
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToEpochTime.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a time object to its epoch time.</para>
            </summary>
            <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
            <code>r.now().toEpochTime()
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToEpochTime.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToEpochTime.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToGeojson.#ctor(System.Object)">
            <summary>
            <para>Convert a ReQL geometry object to a <a href="http://geojson.org">GeoJSON</a> object.</para>
            </summary>
            <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
            <code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);
            // result passed to callback
            {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToGeojson.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a ReQL geometry object to a <a href="http://geojson.org">GeoJSON</a> object.</para>
            </summary>
            <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
            <code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);
            // result passed to callback
            {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToGeojson.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a ReQL geometry object to a <a href="http://geojson.org">GeoJSON</a> object.</para>
            </summary>
            <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
            <code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);
            // result passed to callback
            {
                'type': 'Point',
                'coordinates': [ -122.423246, 37.779388 ]
            }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToGeojson.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToGeojson.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToIso8601.#ctor(System.Object)">
            <summary>
            <para>Convert a time object to a string in ISO 8601 format.</para>
            </summary>
            <example><para>Example: Return the current ISO 8601 time.</para>
            <code>r.now().toISO8601().run(conn, callback)
            // Result passed to callback
            "2015-04-20T18:37:52.690+00:00"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToIso8601.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a time object to a string in ISO 8601 format.</para>
            </summary>
            <example><para>Example: Return the current ISO 8601 time.</para>
            <code>r.now().toISO8601().run(conn, callback)
            // Result passed to callback
            "2015-04-20T18:37:52.690+00:00"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToIso8601.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a time object to a string in ISO 8601 format.</para>
            </summary>
            <example><para>Example: Return the current ISO 8601 time.</para>
            <code>r.now().toISO8601().run(conn, callback)
            // Result passed to callback
            "2015-04-20T18:37:52.690+00:00"
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToIso8601.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToIso8601.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToJsonString.#ctor(System.Object)">
            <summary>
            <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
            </summary>
            <example><para>Example: Get a ReQL document as a JSON string.</para>
            <code>&gt; r.table('hero').get(1).toJSON()
            // result returned to callback
            '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToJsonString.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
            </summary>
            <example><para>Example: Get a ReQL document as a JSON string.</para>
            <code>&gt; r.table('hero').get(1).toJSON()
            // result returned to callback
            '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.ToJsonString.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
            </summary>
            <example><para>Example: Get a ReQL document as a JSON string.</para>
            <code>&gt; r.table('hero').get(1).toJSON()
            // result returned to callback
            '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToJsonString.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.ToJsonString.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Tuesday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Tuesday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TypeOf.#ctor(System.Object)">
            <summary>
            <para>Gets the type of a ReQL query's return value.</para>
            </summary>
            <example><para>Example: Get the type of a string.</para>
            <code>r.expr("foo").typeOf().run(conn, callback);
            // Result passed to callback
            "STRING"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TypeOf.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Gets the type of a ReQL query's return value.</para>
            </summary>
            <example><para>Example: Get the type of a string.</para>
            <code>r.expr("foo").typeOf().run(conn, callback);
            // Result passed to callback
            "STRING"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.TypeOf.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Gets the type of a ReQL query's return value.</para>
            </summary>
            <example><para>Example: Get the type of a string.</para>
            <code>r.expr("foo").typeOf().run(conn, callback);
            // Result passed to callback
            "STRING"
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TypeOf.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.TypeOf.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ungroup.#ctor(System.Object)">
            <summary>
            <para>Takes a grouped stream or grouped data and turns it into an array of
            objects representing the groups.  Any commands chained after <code>ungroup</code>
            will operate on this array, rather than operating on each group
            individually.  This is useful if you want to e.g. order the groups by
            the value of their reduction.</para>
            </summary>
            <example><para>Example: What is the maximum number of points scored by each
            player, with the highest scorers first?</para>
            <code>r.table('games')
               .group('player').max('points')('points')
               .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ungroup.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Takes a grouped stream or grouped data and turns it into an array of
            objects representing the groups.  Any commands chained after <code>ungroup</code>
            will operate on this array, rather than operating on each group
            individually.  This is useful if you want to e.g. order the groups by
            the value of their reduction.</para>
            </summary>
            <example><para>Example: What is the maximum number of points scored by each
            player, with the highest scorers first?</para>
            <code>r.table('games')
               .group('player').max('points')('points')
               .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Ungroup.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Takes a grouped stream or grouped data and turns it into an array of
            objects representing the groups.  Any commands chained after <code>ungroup</code>
            will operate on this array, rather than operating on each group
            individually.  This is useful if you want to e.g. order the groups by
            the value of their reduction.</para>
            </summary>
            <example><para>Example: What is the maximum number of points scored by each
            player, with the highest scorers first?</para>
            <code>r.table('games')
               .group('player').max('points')('points')
               .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ungroup.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Ungroup.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Union.#ctor(System.Object)">
            <summary>
            <para>Merge two or more sequences.</para>
            </summary>
            <example><para>Example: Construct a stream of all heroes.</para>
            <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Union.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Merge two or more sequences.</para>
            </summary>
            <example><para>Example: Construct a stream of all heroes.</para>
            <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Union.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Merge two or more sequences.</para>
            </summary>
            <example><para>Example: Construct a stream of all heroes.</para>
            <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Union.Item(System.Object)">
            <summary>
             "interleave": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Union.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "interleave": "T_EXPR"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Union.OptArg(System.String,System.Object)">
            <summary>
             "interleave": "T_EXPR"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Union.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Union.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Upcase.#ctor(System.Object)">
            <summary>
            <para>Uppercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"SENTENCE ABOUT LATEX."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Upcase.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Uppercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"SENTENCE ABOUT LATEX."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Upcase.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Uppercases a string.</para>
            </summary>
            <example><para>Example:</para>
            <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
            </code>
            <para>Result:</para>
            <code>"SENTENCE ABOUT LATEX."
            </code>
            <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Upcase.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Upcase.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Update.#ctor(System.Object)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Update.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Update.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
            </summary>
            <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
            <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Update.Item(System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Update.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Update.OptArg(System.String,System.Object)">
            <summary>
             "durability": "E_DURABILITY",
              "return_changes": [
                "T_BOOL",
                "always"
              ],
              "non_atomic": "T_BOOL"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Update.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Update.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Uuid.#ctor(System.Object)">
            <summary>
            <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
            </summary>
            <example><para>Example: Generate a UUID.</para>
            <code>&gt; r.uuid().run(conn, callback)
            // result returned to callback
            "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Uuid.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
            </summary>
            <example><para>Example: Generate a UUID.</para>
            <code>&gt; r.uuid().run(conn, callback)
            // result returned to callback
            "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Uuid.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
            </summary>
            <example><para>Example: Generate a UUID.</para>
            <code>&gt; r.uuid().run(conn, callback)
            // result returned to callback
            "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Uuid.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Uuid.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Values.#ctor(System.Object)">
            <summary>
            <para>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href="/api/javascript/keys">keys</a>.</para>
            </summary>
            <example><para>Example: Get all of the values from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).values().run(conn, callback);
            // Result passed to callback
            [ 1, "fred@example.com", "fred" ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Values.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href="/api/javascript/keys">keys</a>.</para>
            </summary>
            <example><para>Example: Get all of the values from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).values().run(conn, callback);
            // Result passed to callback
            [ 1, "fred@example.com", "fred" ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Values.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href="/api/javascript/keys">keys</a>.</para>
            </summary>
            <example><para>Example: Get all of the values from a table row.</para>
            <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
            
            r.table('users').get(1).values().run(conn, callback);
            // Result passed to callback
            [ 1, "fred@example.com", "fred" ]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Values.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Values.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Var.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Var.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Wait.#ctor(System.Object)">
            <summary>
            <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
            </summary>
            <example><para>Example: Wait on a table to be ready.</para>
            <code>&gt; r.table('superheroes').wait().run(conn, callback);
            // Result passed to callback
            { "ready": 1 }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Wait.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
            </summary>
            <example><para>Example: Wait on a table to be ready.</para>
            <code>&gt; r.table('superheroes').wait().run(conn, callback);
            // Result passed to callback
            { "ready": 1 }
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Wait.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
            </summary>
            <example><para>Example: Wait on a table to be ready.</para>
            <code>&gt; r.table('superheroes').wait().run(conn, callback);
            // Result passed to callback
            { "ready": 1 }
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wait.Item(System.Object)">
            <summary>
             "wait_for": "E_STATUS",
              "timeout": "T_NUM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wait.Item(RethinkDb.Driver.Model.OptArgs)">
            <summary>
             "wait_for": "E_STATUS",
              "timeout": "T_NUM"
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Wait.OptArg(System.String,System.Object)">
            <summary>
             "wait_for": "E_STATUS",
              "timeout": "T_NUM"
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wait.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wait.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wednesday.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Wednesday.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.WithFields.#ctor(System.Object)">
            <summary>
            <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
            </summary>
            <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
            <para>Existing table structure:</para>
            <code>[
                { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
                { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
                { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
            ]
            </code>
            <para>Command and output:</para>
            <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
            // Result passed to callback
            [
                { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
                { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.WithFields.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
            </summary>
            <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
            <para>Existing table structure:</para>
            <code>[
                { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
                { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
                { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
            ]
            </code>
            <para>Command and output:</para>
            <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
            // Result passed to callback
            [
                { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
                { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
            ]
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.WithFields.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
            </summary>
            <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
            <para>Existing table structure:</para>
            <code>[
                { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
                { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
                { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
            ]
            </code>
            <para>Command and output:</para>
            <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
            // Result passed to callback
            [
                { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
                { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
            ]
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.WithFields.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.WithFields.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Without.#ctor(System.Object)">
            <summary>
            <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
            the specified paths removed.</para>
            </summary>
            <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
            out the list of IronMan's romantic conquests.</para>
            <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Without.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
            the specified paths removed.</para>
            </summary>
            <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
            out the list of IronMan's romantic conquests.</para>
            <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Without.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
            the specified paths removed.</para>
            </summary>
            <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
            out the list of IronMan's romantic conquests.</para>
            <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Without.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Without.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Year.#ctor(System.Object)">
            <summary>
            <para>Return the year of a time object.</para>
            </summary>
            <example><para>Example: Retrieve all the users born in 1986.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").year().eq(1986)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Year.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Return the year of a time object.</para>
            </summary>
            <example><para>Example: Retrieve all the users born in 1986.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").year().eq(1986)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Year.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Return the year of a time object.</para>
            </summary>
            <example><para>Example: Retrieve all the users born in 1986.</para>
            <code>r.table("users").filter(function(user) {
                return user("birthdate").year().eq(1986)
            }).run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Year.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Year.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Zip.#ctor(System.Object)">
            <summary>
            <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
            </summary>
            <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
            <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
                .zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Zip.#ctor(RethinkDb.Driver.Model.Arguments)">
            <summary>
            <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
            </summary>
            <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
            <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
                .zip().run(conn, callback)
            </code></example>
        </member>
        <member name="M:RethinkDb.Driver.Ast.Zip.#ctor(RethinkDb.Driver.Model.Arguments,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
            </summary>
            <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
            <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
                .zip().run(conn, callback)
            </code></example>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Zip.Item(System.String)">
            <summary>
            Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
            </summary>
            <param name="bracket"></param>
        </member>
        <member name="P:RethinkDb.Driver.Ast.Zip.Item(System.Int32)">
            <summary>
            Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
            </summary>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="T:RethinkDb.Driver.Extras.Dao.IDocument`1">
            <summary>
            Interface for Document of IdT
            </summary>
            <typeparam name="IdT">Type of ID property</typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Extras.Dao.IDocument`1.Id">
            <summary>
            The Id of the document
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Extras.Dao.Document`1">
            <summary>
            All Documents (aka. domain objects / entities) should derive from Document of IdT
            </summary>
            <typeparam name="IdT">Type of Id property</typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Extras.Dao.Document`1.Id">
            <summary>
            The Id of the document
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Extras.Dao.IDao`2">
            <summary>
            Document Access Object interface
            </summary>
            <typeparam name="T">Document entity</typeparam>
            <typeparam name="IdT">Type of Id property</typeparam>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.GetById(`1)">
            <summary>
            Get a document by Id.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.GetByIdAsync(`1)">
            <summary>
            Get a document by Id.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.Save(`0)">
            <summary>
            Save document. If the document exists, an exception will be thrown. Returns and deserializes the returned document.
            </summary>
            <returns>Returns and deserializes the returned document</returns>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.SaveAsync(`0)">
            <summary>
            Save document. If the document exists, an exception will be thrown. Returns and deserializes the returned document.
            </summary>
            <returns>Returns and deserializes the returned document</returns>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.Update(`0)">
            <summary>
            Updates an existing document. If the document does not exist, an exception will be thrown. 
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.UpdateAsync(`0)">
            <summary>
            Updates an existing document. If the document does not exist, an exception will be thrown. 
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.SaveOrUpdate(`0)">
            <summary>
            Saves or updates a document. If the document doesn't exist, it will be saved. If the document exists, it will be updated.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.SaveOrUpdateAsync(`0)">
            <summary>
            Saves or updates a document. If the document doesn't exist, it will be saved. If the document exists, it will be updated.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.Delete(`0)">
            <summary>
            Deletes a document.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.DeleteAsync(`0)">
            <summary>
            Deletes a document.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.DeleteById(`1)">
            <summary>
            Delete a document by Id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.IDao`2.DeleteByIdAsync(`1)">
            <summary>
            Delete a document by Id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:RethinkDb.Driver.Extras.Dao.RethinkDao`2">
            <summary>
            Generic Document Access Object for RethinkDB
            </summary>
            <typeparam name="T">Type of Document (aka. domain object / entity)</typeparam>
            <typeparam name="IdT">The type of the Id property in Document</typeparam>
        </member>
        <member name="F:RethinkDb.Driver.Extras.Dao.RethinkDao`2.R">
            <summary>
            RethinkDB query root.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Extras.Dao.RethinkDao`2.conn">
            <summary>
            RethinkDB connection
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Extras.Dao.RethinkDao`2.DbName">
            <summary>
            RethinkDB database name
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Extras.Dao.RethinkDao`2.TableName">
            <summary>
            RethinkDB table name
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Extras.Dao.RethinkDao`2.Table">
            <summary>
            Table AST term used to build queries stating at the table term.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.#ctor(RethinkDb.Driver.Net.IConnection,System.String,System.String)">
            <summary>
            Constructor for <see cref="T:RethinkDb.Driver.Extras.Dao.RethinkDao`2"/>
            </summary>
            <param name="conn">The connection</param>
            <param name="dbName">The database</param>
            <param name="tableName">The table</param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.GetById(`1)">
            <summary>
            Get a document by Id.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.GetByIdAsync(`1)">
            <summary>
            Get a document by Id.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.Save(`0)">
            <summary>
            Save document. If the document exists, an exception will be thrown. Returns and deserializes the returned document.
            </summary>
            <returns>Returns and deserializes the returned document</returns>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.SaveAsync(`0)">
            <summary>
            Save document. If the document exists, an exception will be thrown. Returns and deserializes the returned document.
            </summary>
            <returns>Returns and deserializes the returned document</returns>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.Update(`0)">
            <summary>
            Updates an existing document. If the document does not exist, an exception will be thrown. 
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.UpdateAsync(`0)">
            <summary>
            Updates an existing document. If the document does not exist, an exception will be thrown. 
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.SaveOrUpdate(`0)">
            <summary>
            Saves or updates a document. If the document doesn't exist, it will be saved. If the document exists, it will be updated.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.SaveOrUpdateAsync(`0)">
            <summary>
            Saves or updates a document. If the document doesn't exist, it will be saved. If the document exists, it will be updated.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.Delete(`0)">
            <summary>
            Deletes a document.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.DeleteAsync(`0)">
            <summary>
            Deletes a document.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.DeleteById(`1)">
            <summary>
            Delete a document by Id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:RethinkDb.Driver.Extras.Dao.RethinkDao`2.DeleteByIdAsync(`1)">
            <summary>
            Delete a document by Id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:RethinkDb.Driver.Model.ChangeState">
            <summary>
            Change feed states
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeState.Initializing">
            <summary>
            {state: 'initializing'} indicates the following documents represent
            initial values on the feed rather than changes. This will be the first
            document of a feed that returns initial values.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeState.Ready">
            <summary>
            {state: 'ready'} indicates the following documents represent changes.
            This will be the first document of a feed that does not return initial 
            values; otherwise, it will indicate the initial values have all been sent.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.ChangeType">
            <summary>
            If the change feed query contains the include_types opt arg, every result on a changefeed 
            will include a type field with a string that indicates the kind of change the result 
            represents: add, remove, change, initial, uninitial, state.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.Add">
            <summary>
            Document was added.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.Remove">
            <summary>
            Document was removed
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.Change">
            <summary>
            Document was changed.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.Initial">
            <summary>
            Initial document.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.Uninitial">
            <summary>
            If an initial result for a document has been sent and a change is made to that
            document that would move it to the unsent part of the result set 
            (e.g., a changefeed monitors the top 100 posters, the first 50 have been sent,
            and poster 48 has become poster 52), an 'uninitial' notification will be sent,
            with an old_val field but no new_val field.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Model.ChangeType.State">
            <summary>
            A state document.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.Change`1">
            <summary>
            Change Document Helper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Model.Change`1.OldValue">
            <summary>
            When a document is deleted, new_val will be null; when a document is inserted, old_val will be null.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Change`1.NewValue">
            <summary>
            When a document is deleted, new_val will be null; when a document is inserted, old_val will be null.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Change`1.State">
            <summary>
            If include_states = true optional argument was specified, the changefeed stream
            will include special status documents consisting of the state 
            indicating a change in the feed’s state. These states can occur at any point
            in the feed between the notifications. If includeStates = false (the default),
            the state status will not be set. See <see cref="T:RethinkDb.Driver.Model.ChangeState"/>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Change`1.Type">
            <summary>
            If an include_types opt arg is set, every result on a changefeed will include a type
            field with a string that indicates the kind of change the result represents:
             add, remove, change, initial, uninitial, state.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Change`1.ExtraData">
            <summary>
            Extra metadata that couldn't be parsed, if any.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.ExtensionsForResult">
            <summary>
            Extension method Result helpers.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertNoErrors(RethinkDb.Driver.Model.Result)">
            <summary>
            Ensures no errors occurs during the processing of the result.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertDeleted(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of deleted documents.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertInserted(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of inserted documents.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertReplaced(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of replaced documents.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertSkipped(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of skipped documents.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertUnchanged(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of unchanged documents.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertTablesCreated(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of tables created.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertTablesDropped(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of tables deleted.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertDatabasesCreated(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of databases created.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="M:RethinkDb.Driver.Model.ExtensionsForResult.AssertDatabasesDropped(RethinkDb.Driver.Model.Result,System.UInt64)">
            <summary>
            Ensures a number of databases deleted.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlAssertFailure">Thrown when the assertion applies</exception>
        </member>
        <member name="T:RethinkDb.Driver.Model.GroupedResult`2">
            <summary>
            A grouped result helper.
            </summary>
            <typeparam name="TKey">The KEY type</typeparam>
            <typeparam name="TElement">The VALUE type</typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Model.GroupedResult`2.Key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.GroupedResult`2.Items">
            <summary>
            The list of items grouped by <see cref="P:RethinkDb.Driver.Model.GroupedResult`2.Key"/>
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.GroupedResultSet`2">
            <summary>
            A typed grouped result helper.
            </summary>
            <typeparam name="TKey">The KEY type</typeparam>
            <typeparam name="TItem">The VALUE type</typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Model.GroupedResultSet`2.ItemType">
            <summary>
            Item type
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.GroupedResultSet`2.KeyType">
            <summary>
            Key type
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.MapObject">
            <summary>
            Just a dictionary of (object,object)
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.MapObject.With(System.Object,System.Object)">
            <summary>
            Fluent helper for setting dictionary[key] = value.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.MapObject.With(System.Object)">
            <summary>
            Fluent helper for setting all key,value pairs of an anonymous type
            and loading them into the MapObject.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.MapObject.FromAnonType(System.Object)">
            <summary>
            Creates a new MapObject from an anonymous type.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.OptArgs">
            <summary>
            Dictionary of string,ReqlAst
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.With(System.String,System.Object)">
            <summary>
            Fluent helper for setting dictionary[key] = value.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.With(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Fluent helper for setting dictionary[key] = List.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.With(System.Object)">
            <summary>
            Fluent helper for setting dictionary[key] = value multiple times 
            for each Property=Value in the anonType.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.With(RethinkDb.Driver.Model.OptArgs)">
            <summary>
            Fluent helper to copy all key value pairs from <paramref name="args"/>
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.FromMap(System.Collections.Generic.IDictionary{System.String,RethinkDb.Driver.Ast.ReqlAst})">
            <summary>
            Creates a new OptArg from all key value pairs in <paramref name="map"/>
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.OptArgs.FromAnonType(System.Object)">
            <summary>
            Creates a new OptArg from all Property = Value pairs in <paramref name="anonType"/> anonymous type.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.ReqlLambda">
            <summary>
            Root function interface for a lambda expression.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.Result">
            <summary>
            A typed helper for reading response meta data.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.GeneratedKeys">
            <summary>
            A list of generated primary keys for inserted documents whose primary keys were not specified (capped to 100,000).
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Inserted">
            <summary>
            The number of documents successfully inserted.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Replaced">
            <summary>
            The number of documents updated when conflict is set to "replace" or "update".
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Unchanged">
            <summary>
            The number of documents whose fields are identical to existing documents with the same primary key when conflict is set to "replace" or "update".
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Errors">
            <summary>
            The number of errors encountered while performing the insert.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.FirstError">
            <summary>
            If errors were encountered, contains the text of the first error.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Deleted">
            <summary>
            Deleted: 0 for an insert operation.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Skipped">
            <summary>
            Skipped: 0 for an insert operation.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Warnings">
            <summary>
            If the field generated_keys is truncated, you will get the warning “Too many generated keys (...), array truncated to 100000.”.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Changes">
            <summary>
            If returnChanges is set to true, this will be an array of objects, one for each objected affected by the insert operation. Each object will have two keys: {new_val: -new value-, old_val: null}.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Model.Result.ChangesAs``1">
            <summary>
            If the query had return_changes set, get the changes as <typeparam name="T"></typeparam>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.Ready">
            <summary>
            The value is an integer indicating the number of tables waited for. It will always be 1 when wait is called on a table, and the total number of tables when called on a database.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.DatabasesCreated">
            <summary>
            The number of databases created.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.DatabasesDropped">
            <summary>
            The number of databases dropped.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.TablesCreated">
            <summary>
            The number of tables created.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Result.TablesDropped">
            <summary>
            The number of tables dropped.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Model.Server">
            <summary>
            A type helper that represents the result of <see cref="M:RethinkDb.Driver.Net.Connection.Server"/>
            and <seealso cref="M:RethinkDb.Driver.Net.Connection.ServerAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Server.Id">
            <summary>
            The server's id
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Server.Name">
            <summary>
            The server's name.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Server.Proxy">
            <summary>
            True if the driver is connected to a proxy server. False if the driver is
            connected to a RethinkDB server.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Model.Server.ExtraData">
            <summary>
            Extra metadata that couldn't be parsed, if any.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Log">
            <summary>
            Logger class for the driver.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Log.Instance">
            <summary>
            RethinkDB Logger
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Log.IsTraceEnabled">
            <summary>
            Returns true if trace log level is enabled.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Log.IsDebugEnabled">
            <summary>
            Returns true if debug log level is enabled.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Log.Trace(System.String)">
            <summary>
            Trace message
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Log.Debug(System.String)">
            <summary>
            Debug message
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Log.TruncateBinaryTypes">
            <summary>
            Truncates BASE64 responses to make logs easier to read. Default true.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.ConnectionPool">
            <summary>
            Represents a pooled connection to a RethinkDB cluster.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Clustering.ConnectionPool.Db">
            <summary>
            The default database used by queries.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Shutdown">
            <summary>
            Shutdown the connection pool.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Clustering.ConnectionPool.AnyOpen">
            <summary>
            Used to determine if a node is currently available in the host pool
            to receive queries. The boolean value should be considered a "rough" estimate
            of the availability of a node in the pool. This indicator may lag behind
            as it does not check the exact state of every node's TCP socket.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.StartPool">
            <summary>
            Starts the connection pool.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Discoverer">
            <summary>
            This thread is in charge of discovering new hosts via rethinkdb system
            table change feed. If a new host is found it is added to the host pool.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.MaybeAddNewHost(RethinkDb.Driver.Net.Clustering.Server)">
            <summary>
            Called by the discoverer thread when a new server has been added (or comes back
            online). This method will determine if AddHost is needed. We only have monotonically
            increasing hosts to prevent unnecessary locking on the host list array.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Supervisor">
            <summary>
            This thread is mainly in charge of supervising the connections.
            The supervisor will kick off a worker to try to reconnect
            connections that are due for reconnecting. It also scans though
            the host list looking for connections that are not dead but have errors
            and attempts to reset them.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.NewPoolConnection(System.String,System.Int32)">
            <summary>
            Called to create a new connection to a RethinkDB server.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Dispose">
            <summary>
            Disposes / shuts down the connection pool.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder">
            <summary>
            The connection pool builder.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Seed(System.String[])">
            <summary>
            Seed the driver with the following endpoints. Should be strings of the form "Host:Port".
            </summary>
            <param name="seeds">Strings of the form "Host:Port"</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Seed(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Seed the driver with the following endpoints. Should be strings of the form "Host:Port".
            </summary>
            <param name="seeds">Strings of the form "Host:Port"</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Seed(System.Collections.Generic.IEnumerable{RethinkDb.Driver.Net.Clustering.Seed})">
            <summary>
            Seed the driver with the following endpoints.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Seed(RethinkDb.Driver.Net.Clustering.Seed[])">
            <summary>
            Seed the driver with the following endpoints.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.InitialTimeout(System.Int32)">
            <summary>
            Sets the initial timeout (in seconds) for connecting. 
            If a connection cannot be made within the specified time span
            to any server, an exception is thrown. If no timeout is set,
            the call to Connect() will block until at least one connection
            is made.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Discover(System.Boolean)">
            <summary>
            discover() is used to enable host discovery, when true the driver
            will attempt to discover any new nodes added to the cluster and then
            start sending queries to the newly added cluster nodes.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Db(System.String)">
            <summary>
            The default DB for queries.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.AuthKey(System.String)">
            <summary>
            The authorization key to the cluster.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.User(System.String,System.String)">
            <summary>
            The user account and password to connect as (default "admin", "").
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.PoolingStrategy(RethinkDb.Driver.Net.Clustering.IPoolingStrategy)">
            <summary>
            The selection strategy to for selecting a connection. IE: RoundRobin, HeartBeat, or EpsilonGreedy.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.Connect">
            <summary>
            Creates and establishes the connection pool using the specified settings.
            </summary>
            <returns>The returned connect pool is ready to be used. At least one host will be ready to accept a query.</returns>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.ConnectAsync">
            <summary>
            Asynchronously creates and establishes the connection pool using the specified settings.
            </summary>
            <returns>The returned connect pool is ready to be used. At least one host will be ready to accept a query.</returns>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.ConnectionPool.Builder.EnableSsl(RethinkDb.Driver.Net.SslContext,System.String,System.String)">
            <summary>
            Enables SSL over the driver port
            </summary>
            <param name="context">Context settings for the SSL stream.</param>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool">
             <summary>
             Epsilon Greedy is an algorithm that allows HostPool not only to track failure state,
             but also to learn about "better" options in terms of speed, and to pick from available hosts
             based on how well they perform. This gives a weighted request rate to better
             performing hosts, while still distributing requests to all hosts (proportionate to their performance).
            
             A good overview of Epsilon Greedy is here http://stevehanov.ca/blog/index.php?id=132
            
             To compute the weighting scores, we perform a weighted average of recent response times, over the course of
             `decayDuration`. decayDuration may be set to null to use the default value of 5 minutes
             We then use the supplied EpsilonValueCalculator to calculate a score from that weighted average response time.
             </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.InitialEpsilon">
            <summary>
            Initial epsilon value.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.MinEpsilon">
            <summary>
            The steady state percentage of time to explore
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.EpsilonDecay">
            <summary>
            The decay exploration rate.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.EpsilonBuckets">
            <summary>
            Number of bucket slot measurements
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.epsilon">
            <summary>
            Epsilon threshold that controls exploration. If a random double is
            less than &lt; (or below) epsilon, then an round-robin exploration is performed.
            IE: Higher the epsilon, the more chances for exploration of other hosts.
            In the long run, epsilon will EpsilonDecay on each exploration until reaching MinEpsilon.
            Additionally, in the long run, exploration will only take place MinEpsilon % of the time.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.Random">
            <summary>
            Random value generator.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator,System.Boolean)">
             <summary>
             Construct an Epsilon Greedy HostPool
            
             Epsilon Greedy is an algorithm that allows HostPool not only to track failure state,
             but also to learn about "better" options in terms of speed, and to pick from available hosts
             based on how well they perform. This gives a weighted request rate to better
             performing hosts, while still distributing requests to all hosts (proportionate to their performance).
            
             A good overview of Epsilon Greedy is here http://stevehanov.ca/blog/index.php?id=132
            
             To compute the weighting scores, we perform a weighted average of recent response times, over the course of
             `decayDuration`. decayDuration may be set to null to use the default value of 5 minutes
             We then use the supplied EpsilonValueCalculator to calculate a score from that weighted average response time.
             </summary>
             <param name="retryDelayInitial">The initial retry delay when a host goes down. Default, null, is 30 seconds.</param>
             <param name="retryDelayMax">The maximum retry delay when a host goes down. Default, null, is 15 minutes.</param>
             <param name="decayDuration">The amount of time to cycle through all EpsilonBuckets (0...120). 
             This decay duration is divided by EpsilonBuckets (default: 5 min / 120 buckets = 2.5 seconds per bucket).
             IE: The average will be taken every decayDuration/EpsilonBuckets seconds.</param>
             <param name="calc">Given the weighted average among EpsilonBuckets slot measurements, calculate the host's EpsilonValue using EpsilonCalculators.Linear/Logarithmic/Polynomial(exponent)</param>
             <param name="autoStartDecayTimer">Automatically starts the decay timer. If false, you need to call StartDecayTimer manually for epsilon values to be calculated correctly.</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.#ctor(System.Nullable{System.TimeSpan},RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator,System.Boolean)">
             <summary>
             Construct an Epsilon Greedy HostPool
            
             Epsilon Greedy is an algorithm that allows HostPool not only to track failure state,
             but also to learn about "better" options in terms of speed, and to pick from available hosts
             based on how well they perform. This gives a weighted request rate to better
             performing hosts, while still distributing requests to all hosts (proportionate to their performance).
            
             A good overview of Epsilon Greedy is here http://stevehanov.ca/blog/index.php?id=132
            
             To compute the weighting scores, we perform a weighted average of recent response times, over the course of
             `decayDuration`. decayDuration may be set to null to use the default value of 5 minutes
             We then use the supplied EpsilonValueCalculator to calculate a score from that weighted average response time.
             </summary>
             <param name="decayDuration">The amount of time to cycle though all EpsilonBuckets (0...120). 
             This decay duration is divided by EpsilonBuckets (default: 5 min / 120 buckets = 2.5 seconds per bucket).
             IE: The average will be taken every decayDuration/EpsilonBuckets seconds.</param>
             <param name="calc">Given the weighted average among EpsilonBuckets slot measurements, calculate the host's EpsilonValue using EpsilonCalculators.Linear/Logarithmic/Polynomial(exponent)</param>
             <param name="autoStartDecayTimer">Automatically starts the decay timer. If false, you need to call StartDecayTimer manually for epsilon values to be calculated correctly.</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.SetEpsilon(System.Single)">
            <summary>
            Epsilon threshold that controls exploration. If a random double is
            less than &lt; (or below) epsilon, then an round-robin exploration is performed.
            IE: Higher the epsilon, the more chances for exploration of other hosts.
            In the long run, epsilon will EpsilonDecay on each exploration to MinEpsilon.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonGreedyHostPool.StartDecayTimer">
            <summary>
            If the autoStartDecayTimer was false, you need to start
            the decay timer manually using this method.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator">
            <summary>
            Classes implementing this interface are used to convert the average response time for a host
            into a score that can be used to weight hosts in the epsilon greedy hostpool. Lower response
            times should yield higher scores (we want to select the faster hosts more often) The default
            LinearEpsilonValueCalculator just uses the reciprocal of the response time. In practice, any
            decreasing function from the positive reals to the positive reals should work.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator.CalcValueFromAvgResponseTime(System.Single)">
            <summary>
            The implementation of the value calculation.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator.LinearEpsilonValueCalculator(System.Single)">
            <summary>
            Linear value calculation
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator.LogEpsilonValueCalculator(System.Single)">
            <summary>
            Logarithmic value calculation
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonValueCalculator.PolynomialEpsilonValueCalculator(System.Single,System.Single)">
            <summary>
            Polynomial value calculation
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.LinearEpsilonValueCalculator">
            <summary>
            Linear epsilon value calculation
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.LinearEpsilonValueCalculator.CalcValueFromAvgResponseTime(System.Single)">
            <summary>
            The implementation of the value calculation.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.LogEpsilonValueCalculator">
            <summary>
            Logarithmic epsilon value calculation
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.LogEpsilonValueCalculator.CalcValueFromAvgResponseTime(System.Single)">
            <summary>
            The implementation of the value calculation.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.PolynomialEpsilonValueCalculator">
            <summary>
            Polynomial epsilon value calculation
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.PolynomialEpsilonValueCalculator.#ctor(System.Single)">
            <summary>
            Constructor with exponent
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.PolynomialEpsilonValueCalculator.CalcValueFromAvgResponseTime(System.Single)">
            <summary>
            The implementation of the value calculation.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.EpsilonCalculator">
            <summary>
            Classes implementing this interface are used to convert the average response time for a host
            into a score that can be used to weight hosts in the epsilon greedy hostpool. Lower response
            times should yield higher scores (we want to select the faster hosts more often) The default
            LinearEpsilonValueCalculator just uses the reciprocal of the response time. In practice, any
            decreasing function from the positive reals to the positive reals should work.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonCalculator.Linear">
            <summary>
            Linear calculator to convert the average response time for a host
            into a score that can be used to weight hosts in the epsilon greedy hostpool. Lower response
            times should yield higher scores (we want to select the faster hosts more often) The default
            LinearEpsilonValueCalculator just uses the reciprocal of the response time. In practice, any
            decreasing function from the positive reals to the positive reals should work.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonCalculator.Logarithmic">
            <summary>
            Logarithmic calculator to convert the average response time for a host
            into a score that can be used to weight hosts in the epsilon greedy hostpool. Lower response
            times should yield higher scores (we want to select the faster hosts more often) The default
            LinearEpsilonValueCalculator just uses the reciprocal of the response time. In practice, any
            decreasing function from the positive reals to the positive reals should work.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.EpsilonCalculator.Polynomial(System.Single)">
            <summary>
            Polynomial calculator to convert the average response time for a host
            into a score that can be used to weight hosts in the epsilon greedy hostpool. Lower response
            times should yield higher scores (we want to select the faster hosts more often) The default
            LinearEpsilonValueCalculator just uses the reciprocal of the response time. In practice, any
            decreasing function from the positive reals to the positive reals should work.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.RoundRobinHostPool">
            <summary>
            Create a new RoundRobin host pool. Each host is used in a round robin
            strategy when processing each query.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.RoundRobinHostPool.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new RoundRobin host pool. Each host is used in a round robin
            strategy when processing each query. When a host goes down, the supervisor will
            wait retryDelayInitial timespan before trying again. If the reconnect fails, the 
            retry delay is doubled. Doubling of the retry is stopped at once the retry delay
            is greater than retryDelayMax; thereafter, every subsequent retry is retryDelayMax.
            The retryDelayInitial is 30 seconds, and retryDelayMax is 15 minutes.
            </summary>
            <param name="retryDelayInitial">The initial retry delay when a host goes down. Default, null, is 30 seconds.</param>
            <param name="retryDelayMax">The maximum retry delay when a host goes down. Default, null, is 15 minutes.</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.RoundRobinHostPool.#ctor">
            <summary>
            Create a new RoundRobin host pool. Each host is used in a round robin
            strategy when processing each query. When a host goes down, the supervisor will
            wait retryDelayInitial timespan before trying again. If the reconnect fails, the 
            retry delay is doubled. Doubling of the retry is stopped at once the retry delay
            is greater than retryDelayMax; thereafter, every subsequent retry is retryDelayMax.
            The retryDelayInitial is 30 seconds, and retryDelayMax is 15 minutes.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Clustering.Seed">
            <summary>
            Represents a RethinkDB server endpoint.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Clustering.Seed.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RethinkDB seed endpoint.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Clustering.Seed.IpAddress">
            <summary>
            RethinkDB hostname
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Clustering.Seed.Port">
            <summary>
            RethinkDB port
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Connection">
            <summary>
            Represents a single connection to a RethinkDB Server.
            </summary>
        </member>
        <member name="E:RethinkDb.Driver.Net.Connection.ConnectionError">
            <summary>
            Raised when the underlying network connection has thrown an exception.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.Hostname">
            <summary>
            Hostname assigned to the connection.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.Port">
            <summary>
            TCP port number assigned to the connection.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.Db">
            <summary>
            Current default database for queries on the connection. To change default database, <see cref="M:RethinkDb.Driver.Net.Connection.Use(System.String)"/>
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Use(System.String)">
            <summary>
            Changes the default database on the connection.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.Timeout">
            <summary>
            Returns the connection timeout setting.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Reconnect(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Reconnects the underlying connection to the server.
            </summary>
            <param name="noreplyWait"><see cref="M:RethinkDb.Driver.Net.Connection.NoReplyWait"/></param>
            <param name="timeout">The timeout value before throwing exception</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.ReconnectAsync(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously reconnects the underlying connection to the server.
            </summary>
            <param name="noreplyWait"><see cref="M:RethinkDb.Driver.Net.Connection.NoReplyWait"/></param>
            <param name="timeout">The timeout value before throwing exception</param>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.Open">
            <summary>
            Gets the connection state of the Socket. This property will return the latest
            known state of the Socket. When it returns false, the Socket was either never connected
            or it is not connected anymore. When it returns true, though, there's no guarantee that the Socket
            is still connected, but only that it was connected at the time of the last IO operation.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.ClientEndPoint">
            <summary>
            Retrieves the client-side local endpoint used to connect to the RethinkDB server.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.RemoteEndPoint">
            <summary>
            Retrieves the server-side endpoint of the connection to the RethinkDB server.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Connection.HasError">
            <summary>
            Flag to check if the underlying socket has some kind of error.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.CheckOpen">
            <summary>
            An exception throwing method to check the state of the 
            underlying socket.
            </summary>
            <exception cref="T:RethinkDb.Driver.ReqlDriverError">Throws when the underlying socket is closed.</exception>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.OnSocketErrorCallback(System.Exception)">
            <summary>
            Called when the underlying <see cref="T:RethinkDb.Driver.Net.SocketWrapper"/> encounters an error.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.CleanUpCursorCache(System.String)">
            <summary>
            Called when cleanup is needed. Usually when the connection was closed
            and can no longer be used. The <see cref="T:RethinkDb.Driver.Net.Connection"/> is in a state
            where it must be "reconnected" before it can be used again.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Dispose">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Close(System.Boolean)">
            <summary>
            Closes the connection.
            </summary>
            <param name="shouldNoReplyWait"><see cref="M:RethinkDb.Driver.Net.Connection.NoReplyWait"/></param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.NoReplyWait">
            <summary>
            Ensure that previous queries executed with NoReplyWait have been processed
            by the server. Note that this guarantee only apples to queries run on the
            same connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.NoReplyWaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously ensures that previous queries executed with NoReplyWait have 
            been processed by the server. Note that this guarantee only apples to queries
            run on the same connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.ServerAsync(System.Threading.CancellationToken)">
            <summary>
            Return the server name and server UUID being used by a connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Server">
            <summary>
            Return the server name and server UUID being used by a connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.RunQueryCursorAsync``1(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken)">
            <summary>
            Fast SUCCESS_SEQUENCE or SUCCESS_PARTIAL conversion without DLR dynamic.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.RunQueryAtomAsync``1(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken)">
            <summary>
            Fast SUCCESS_ATOM conversion without the DLR dynamic
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.RunQueryResultAsync``1(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken)">
            <summary>
            Fast SUCCESS_ATOM or SUCCESS_SEQUENCE conversion without the DLR dynamic
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.RunQueryWaitAsync(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ensures that previous queries executed with NoReplyWait have 
            been processed by the server. Note that this guarantee only apples to queries
            run on the same connection.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.RunQueryAsync``1(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken)">
            <summary>
            Run the query but it's return type is standard dynamic.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.SendQuery(RethinkDb.Driver.Ast.Query,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Sends the query over to the underlying socket for sending.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.PrepareQuery(RethinkDb.Driver.Ast.ReqlAst,RethinkDb.Driver.Model.OptArgs)">
            <summary>
            Prepares the query by setting the default DB if it doesn't exist.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.SetDefaultDb(RethinkDb.Driver.Model.OptArgs)">
            <summary>
            Sets the database if it's not already set.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Connection.Builder">
            <summary>
            The Connection builder.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.Hostname(System.String)">
            <summary>
            The hostname or IP address of the server.
            </summary>
            <param name="val">Hostname or IP address</param>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.Port(System.Int32)">
            <summary>
            The TCP port to connect with.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.Db(System.String)">
            <summary>
            The default DB for queries.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.AuthKey(System.String)">
            <summary>
            The authorization key to the server.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.User(System.String,System.String)">
            <summary>
            The user account and password to connect as (default "admin", "").
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.Timeout(System.Int32)">
            <summary>
            Note: Timeout is not used when using connectAsync();
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.Connect">
            <summary>
            Creates and establishes the connection using the specified settings.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.ConnectAsync">
            <summary>
            Asynchronously creates and establishes the connection using the specified settings.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Connection.Builder.EnableSsl(RethinkDb.Driver.Net.SslContext,System.String,System.String)">
            <summary>
            Enables SSL over the driver port.
            </summary>
            <param name="context">Context settings for the SSL stream.</param>
        </member>
        <member name="T:RethinkDb.Driver.Net.Converter">
            <summary>
            Configuration for RethinkDB's JSON serializer
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Converter.InitializeDefault">
            <summary>
            Initializes default serializer settings. There is no need to call this manually
            as it is already initialized in the static constructor.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.Converters">
            <summary>
            An array of the JSON converters in this static class.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.Serializer">
            <summary>
            The JSON serializer used for ser/deser.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.DateTimeConverter">
            <summary>
            DateTime converter to/from ReQL pseudo types
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.BinaryConverter">
            <summary>
            Binary converter to/from ReQL pseudo types
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.GroupingConverter">
            <summary>
            DateTime converter from ReQL grouping types
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Converter.PocoExprConverter">
            <summary>
            Allows anonymous types to be composed with ReQL expressions like R.Now()
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Converter.PseudoTypeKey">
            <summary>
            The pseudo type key
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Converter.Time">
            <summary>
            Discriminator for TIME types.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Converter.GroupedData">
            <summary>
            Discriminator for GROUPED_DATA types.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Converter.Geometry">
            <summary>
            Discriminator for GEOMETRY types.
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.Net.Converter.Binary">
            <summary>
            Discriminator for BINARY types.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Converter.ConvertPseudoTypes(Newtonsoft.Json.Linq.JToken,RethinkDb.Driver.Net.FormatOptions)">
            <summary>
            Method for converting pseudo types in JToken (JObjects)
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Cursor`1">
            <summary>
            Cursor that handles stream types of responses.
            </summary>
            <typeparam name="T">The underlying item being iterated over.</typeparam>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.BufferedSize">
            <summary>
            The size of the buffered items.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.BufferedItems">
            <summary>
            The list of items in the queue. This does not include the Current item.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.IsFeed">
            <summary>
            Whether the Cursor is any kind of feed.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.IsOpen">
            <summary>
            A flag to determine if the cursor can still be used.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.Error">
            <summary>
            If any, the error that disabled the cursor.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.Token">
            <summary>
            The token of the query that the cursor represents. This is a unique cursor ID.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.MoveNext">
            <summary>
            Advances the cursor to the next item. This is a blocking operation 
            if there are no buffered items to advance on and a response from 
            the server is needed.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously advances the cursor to the next item.
            </summary>
            
            <param name="cancelToken">
              <para>
                Used to cancel the advancement of the next item if it takes too long.
              </para>
              <para>
                The <paramref name="cancelToken"/> has no effect if the cursor still
                has buffered items to draw from. Cancellation pertains to the
                wait on an outstanding network request that is taking too long.
              </para>
              <para>
                If the <paramref name="cancelToken"/> is canceled before
                <see cref="M:RethinkDb.Driver.Net.Cursor`1.MoveNextAsync(System.Threading.CancellationToken)"/> is called, <see cref="T:System.Threading.Tasks.TaskCanceledException"/>
                is thrown immediately before any operation begins.
              </para>
              <para>
                Additionally, cancellation is a safe operation. When
                a <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is thrown, the exception will 
                not disrupt the ordering of cursor items. Cancellation only pertains to
                the semantic *wait* on a pending network request. Cancellation will not 
                cancel an already in-progress network request for more items. 
                Therefore, a <see cref="T:System.Threading.Tasks.TaskCanceledException"/>
                will not disrupt the success of future precedent calls 
                to <see cref="M:RethinkDb.Driver.Net.Cursor`1.MoveNextAsync(System.Threading.CancellationToken)"/>. Network requests will still arrive 
                in order at some later time.
               </para>
            </param>
            
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">
              <para>
                  Thrown when <paramref name="cancelToken"/> is canceled before
                  <see cref="M:RethinkDb.Driver.Net.Cursor`1.MoveNextAsync(System.Threading.CancellationToken)"/> is called.
              </para> 
              <para>
                  Thrown when there are no buffered items to draw from and operation
                  requires waiting on a response from the server.
              </para> 
              <para>
                  When <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is thrown the exception
                  will not disrupt the ordering of items. Any non-canceled precedent calls to
                  <see cref="M:RethinkDb.Driver.Net.Cursor`1.MoveNextAsync(System.Threading.CancellationToken)"/> from an antecedent canceled <see cref="T:System.Threading.Tasks.TaskCanceledException"/>
                  will advance the cursor normally and maintain ordering of items.
              </para>
            </exception>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.Dispose">
            <summary>
            Disposes the Cursor so it cannot be used anymore.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.Close">
            <summary>
            Forcibly closes the Cursor so it cannot be used anymore.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.ClearBuffer">
            <summary>
            Clears <see cref="P:RethinkDb.Driver.Net.Cursor`1.BufferedItems"/>. Any advancement after the buffer
            is cleared will cause a new batch of items to be buffered.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.System#Collections#IEnumerator#Reset">
            <summary>
            Throws always. A Cursor cannot be reset. Hidden from public use.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws always. A Cursor cannot be reset.</exception>
        </member>
        <member name="P:RethinkDb.Driver.Net.Cursor`1.Current">
            <summary>
            The current item in iteration.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Cursor`1.GetEnumerator">
            <summary>
            The cursor's enumerator
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.FormatOptions">
            <summary>
            ReQL pseudo type format options for JToken (JObject, JArray) derivatives.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.FormatOptions.RawTime">
            <summary>
            Leave $reql_time$:TIME types as raw
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.FormatOptions.RawGroups">
            <summary>
            Leave $reql_time$:GROUPED_DATA types as raw
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.FormatOptions.RawBinary">
            <summary>
            Leave $reql_time$:BINARY types as raw
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.FormatOptions.#ctor">
            <summary>
            Format options for JToken
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.FormatOptions.FromOptArgs(RethinkDb.Driver.Model.OptArgs)">
            <summary>
            Factory method for FormatOptions from OptArgs
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.IConnection">
            <summary>
            Represents a marker interface for either a Connection or ConnectionPool.
            This should really only be used for IoC purpose. Do not call methods
            explicitly from this interface, instead the Run* methods at the end of a query.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnection.RunAsync``1(RethinkDb.Driver.Ast.ReqlAst,System.Object,System.Threading.CancellationToken)">
            <summary>
            DO NOT CALL THIS METHOD EXPLICITLY. USE Run*() METHODS AT THE END OF YOUR QUERY.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnection.RunCursorAsync``1(RethinkDb.Driver.Ast.ReqlAst,System.Object,System.Threading.CancellationToken)">
            <summary>
            DO NOT CALL THIS METHOD EXPLICITLY. USE Run*() METHODS AT THE END OF YOUR QUERY.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnection.RunAtomAsync``1(RethinkDb.Driver.Ast.ReqlAst,System.Object,System.Threading.CancellationToken)">
            <summary>
            DO NOT CALL THIS METHOD EXPLICITLY. USE Run*() METHODS AT THE END OF YOUR QUERY.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnection.RunResultAsync``1(RethinkDb.Driver.Ast.ReqlAst,System.Object,System.Threading.CancellationToken)">
            <summary>
            DO NOT CALL THIS METHOD EXPLICITLY. USE Run*() METHODS AT THE END OF YOUR QUERY.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnection.RunNoReply(RethinkDb.Driver.Ast.ReqlAst,System.Object)">
            <summary>
            DO NOT CALL THIS METHOD EXPLICITLY. USE Run*() METHODS AT THE END OF YOUR QUERY.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnectionBuilder`1.Db(System.String)">
            <summary>
            The default DB for queries.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnectionBuilder`1.AuthKey(System.String)">
            <summary>
            The authorization key to the server.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IConnectionBuilder`1.User(System.String,System.String)">
            <summary>
            The user account and password to connect as (default "admin", "").
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.IncrementalSHA256">
            <summary>
            Cross platform SHA 256 Hasher
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IncrementalSHA256.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IncrementalSHA256.AppendData(System.Byte[])">
            <summary>
            Updates the hash value
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IncrementalSHA256.GetHashStringAndReset">
            <summary>
            Gets the final hash calculation in hex string.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IncrementalSHA256.GetHashAndReset">
            <summary>
            Gets the final hash calculation as byte array.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.IncrementalSHA256.Dispose">
            <summary>
            Disposes the hasher.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.Response">
            <summary>
            Response from the server.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Token">
            <summary>
            The token ID associated with the query.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Type">
            <summary>
            The response type <see cref="T:RethinkDb.Driver.Proto.ResponseType"/>.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Notes">
            <summary>
            Notes about the response <see cref="T:RethinkDb.Driver.Proto.ResponseNote"/>
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Data">
            <summary>
            The data payload.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Profile">
            <summary>
            Profile information about the query
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.Backtrace">
            <summary>
            Backtrace information about a failed query.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.Response.ErrorType">
            <summary>
            The error type, if any.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Response.ParseFrom(System.Int64,System.String)">
            <summary>
            Parses a Response from a raw JSON string
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.Response.ToString">
            <summary>
            Pretty printing a response for diagnostics.
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.SocketWrapper.ResponsePump">
            <summary>
            Started just after connect. Do not use or async/await code in this pump
            because it is a long-running task.
            http://blog.i3arnon.com/2015/07/02/task-run-long-running/
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Net.SocketWrapper.Read">
            <summary>
            Blocking Read by the ResponsePump
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.Net.SslContext">
            <summary>
            Settings object for SSL/TLS connections with RethinkDB.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.ClientCertificateCollection">
            <summary>
            Client certificates.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.ServerCertificateValidationCallback">
            <summary>
            Server-side certificate validation callback.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.LocalCertificateSelectionCallback">
            <summary>
            Client-side certificate validation callback
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.EnabledProtocols">
            <summary>
            The enabled security protocols to use over the socket. Default: TLS, TLS 1.1, TLS 1.2.
            SSLv2 and SSLv3 are considered insecure.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.TargetHostOverride">
            <summary>
            By default, the connection's hostname is used. This setting can override host verification.
            </summary>
        </member>
        <member name="P:RethinkDb.Driver.Net.SslContext.CheckCertificateRevocation">
            <summary>
            Check for certificate revocation.
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.RethinkDB">
            <summary>
            The RethinkDB API
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDB.R">
            <summary>
            The Singleton to use to begin interacting with RethinkDB Driver
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.RethinkDB.Connection">
            <summary>
            A connection builder that can create a single connection to a RethinkDB.
            </summary>
            <returns>A connection builder for setting connection properties fluently.</returns>
        </member>
        <member name="M:RethinkDb.Driver.RethinkDB.ConnectionPool">
            <summary>
            A connection builder that can create a pooled connection to a RethinkDB cluster.
            </summary>
            <returns>A connection builder for setting connection pool properties fluently.</returns>
        </member>
        <member name="T:RethinkDb.Driver.RethinkDBConstants">
            <summary>
            RethinkDB constants
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.DefaultDbName">
            <summary>
            Default database name: test
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.DefaultHostname">
            <summary>
            Default hostname: localhost
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.DefaultAuthkey">
            <summary>
            Default auth key: ""
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.DefaultPort">
            <summary>
            Default TCP port: 28015
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.DefaultTimeout">
            <summary>
            Default connection timeout: 20 seconds
            </summary>
        </member>
        <member name="T:RethinkDb.Driver.RethinkDBConstants.Protocol">
            <summary>
            Protocol constants
            </summary>
        </member>
        <member name="F:RethinkDb.Driver.RethinkDBConstants.Protocol.Success">
            <summary>
            What success looks like. :D
            </summary>
        </member>
        <member name="M:RethinkDb.Driver.Utils.StringHelper.GetHexString(System.Byte[])">
            <summary>
            Gets the hex representation of a byte[], in lower case.
            </summary>
        </member>
    </members>
</doc>
